{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\proc-macro2-36ee77c7c246613a\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\proc-macro2-36ee77c7c246613a\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro","proc_macro_span"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\proc-macro2-f67336b24386641d\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_ident-05b1ed5289651a81.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_ident-05b1ed5289651a81.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libautocfg-5be64e68343e3f85.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libautocfg-5be64e68343e3f85.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.15\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.15\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libm-3de92c08c83ef2ac\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libm-3de92c08c83ef2ac\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcfg_if-f2cfec39f226e007.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\windows_x86_64_msvc-fb5a8d7c417fe5b3\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\windows_x86_64_msvc-fb5a8d7c417fe5b3\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblog-10a8da775550baf6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_check","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libversion_check-cb5a7676e4932a43.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libversion_check-cb5a7676e4932a43.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrayvec@0.7.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arrayvec-0.7.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrayvec","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arrayvec-0.7.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libarrayvec-e2751fb69bcade42.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["union"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsmallvec-29a492094447f70a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbitflags-94800245cb48b063.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@1.3.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.3.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.3.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbitflags-5ae31dde6af2a664.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["combaseapi","consoleapi","d3d12","d3d12sdklayers","d3d12shader","d3dcommon","d3dcompiler","dcomp","dxgi1_2","dxgi1_3","dxgi1_4","dxgi1_5","dxgi1_6","dxgidebug","dxgiformat","errhandlingapi","fileapi","handleapi","impl-debug","impl-default","libloaderapi","minwinbase","minwindef","oleauto","processenv","profileapi","std","synchapi","timezoneapi","winbase","windef","winerror","winnt","winreg","winuser","wtypes"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winapi-ec8171b5447ff422\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winapi-ec8171b5447ff422\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libonce_cell-fc27bbd0d3f73aab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.11\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.11\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\parking_lot_core-a5b312a7d00c3ceb\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\parking_lot_core-a5b312a7d00c3ceb\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scopeguard-1.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scopeguard","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scopeguard-1.2.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libscopeguard-0ddf3bfcacbcd354.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libproc_macro2-22599da218564773.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libproc_macro2-22599da218564773.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","linked_libs":[],"linked_paths":[],"cfgs":["arch_enabled"],"env":[["CFG_CARGO_FEATURES","[\"arch\", \"default\"]"],["CFG_OPT_LEVEL","0"],["CFG_TARGET_FEATURES","[\"cmpxchg16b\", \"fxsr\", \"lahfsahf\", \"sse\", \"sse2\", \"sse3\", \"x87\"]"]],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libm-607f737a65a440aa\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","libm","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\num-traits-75f00ca6b9e1b943\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\num-traits-75f00ca6b9e1b943\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6","linked_libs":[],"linked_paths":["native=C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\windows_x86_64_msvc-3fcd1e81730b81ac\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9","linked_libs":["dylib=advapi32","dylib=cfgmgr32","dylib=d2d1","dylib=d3d12","dylib=d3dcompiler","dylib=dcomp","dylib=dwrite","dylib=dxgi","dylib=gdi32","dylib=kernel32","dylib=msimg32","dylib=ole32","dylib=oleaut32","dylib=opengl32","dylib=synchronization","dylib=user32","dylib=windowscodecs","dylib=winspool"],"linked_paths":[],"cfgs":["feature=\"objidlbase\"","feature=\"unknwnbase\"","feature=\"dxgitype\"","feature=\"ntstatus\"","feature=\"vadefs\"","feature=\"basetsd\"","feature=\"d3d9types\"","feature=\"documenttarget\"","feature=\"excpt\"","feature=\"rpc\"","feature=\"d2d1_1\"","feature=\"wincon\"","feature=\"dwrite\"","feature=\"d2d1\"","feature=\"ktmtypes\"","feature=\"dcompanimation\"","feature=\"dxgi\"","feature=\"propidl\"","feature=\"vcruntime\"","feature=\"dcomptypes\"","feature=\"limits\"","feature=\"reason\"","feature=\"rpcndr\"","feature=\"devpropdef\"","feature=\"wincodec\"","feature=\"dcommon\"","feature=\"objidl\"","feature=\"guiddef\"","feature=\"d2dbasetypes\"","feature=\"wincontypes\"","feature=\"d2d1effectauthor\"","feature=\"wtypesbase\"","feature=\"cfg\"","feature=\"oaidl\"","feature=\"cfgmgr32\"","feature=\"rpcdce\"","feature=\"ntdef\"","feature=\"wingdi\"","feature=\"d3d11shader\"","feature=\"ocidl\"","feature=\"d2d1effects\"","feature=\"processthreadsapi\""],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winapi-e782cbc0648f4d68\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.13\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.13\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\lock_api-6410c91afe4a419f\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\lock_api-6410c91afe4a419f\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\parking_lot_core-98f7bb97723d3885\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\zerocopy-673553c7633875bd\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\zerocopy-673553c7633875bd\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblazy_static-9478afca47aaf4bc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\thiserror-83c827a4f6cce979\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\thiserror-83c827a4f6cce979\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\crossbeam-utils-ac026af3b6e0bead\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\crossbeam-utils-ac026af3b6e0bead\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustfft@6.3.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustfft-6.3.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustfft-6.3.0\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["avx","neon","sse"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rustfft-b4d0c8270bfdfff5\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rustfft-b4d0c8270bfdfff5\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strength_reduce@0.2.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strength_reduce-0.2.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strength_reduce","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strength_reduce-0.2.4\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libstrength_reduce-a9a5aa6f89e8df67.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\getrandom-57a6af449156719e\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\getrandom-57a6af449156719e\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simd-adler32@0.3.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\simd-adler32-0.3.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simd_adler32","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\simd-adler32-0.3.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const-generics","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsimd_adler32-3cf2cff339aa0c3f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libmemchr-629c94ca16dc5e8a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libquote-19ce0e42c0346279.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libquote-19ce0e42c0346279.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libm","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.15\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblibm-509b9f53b1440cf6.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\num-traits-fd39bbf150bd265b\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_x86_64_msvc","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_x86_64_msvc-dcbece385a84bcd5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winapi","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["combaseapi","consoleapi","d3d12","d3d12sdklayers","d3d12shader","d3dcommon","d3dcompiler","dcomp","dxgi1_2","dxgi1_3","dxgi1_4","dxgi1_5","dxgi1_6","dxgidebug","dxgiformat","errhandlingapi","fileapi","handleapi","impl-debug","impl-default","libloaderapi","minwinbase","minwindef","oleauto","processenv","profileapi","std","synchapi","timezoneapi","winbase","windef","winerror","winnt","winreg","winuser","wtypes"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwinapi-59c10e48d839bea0.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","linked_libs":[],"linked_paths":[],"cfgs":["has_const_fn_trait_bound"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\lock_api-9f9b4b7e9e51e6d2\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\zerocopy-1aeea83c8ba7d40e\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","linked_libs":[],"linked_paths":[],"cfgs":["error_generic_member_access"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\thiserror-93d6b502a707c92f\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\crossbeam-utils-a4c30eb17caa3820\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\getrandom-44007afa4a0a034b\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustfft@6.3.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rustfft-0c23ac1bd2abd24b\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project_lite","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libpin_project_lite-833b3a3dc313ae34.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rayon-core-a4782ccec1896c4b\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rayon-core-a4782ccec1896c4b\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#siphasher@1.0.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-1.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"siphasher","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-1.0.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsiphasher-dce6cc0d52388285.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libadler2-d70cceafd0a4111f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\foldhash-0.1.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foldhash","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\foldhash-0.1.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfoldhash-85deb140cbe7eb84.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.101","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","visit-mut"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsyn-418e587b357a4bec.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsyn-418e587b357a4bec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","libm","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnum_traits-14992b3c7e26f015.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_targets","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_targets-cc7248b7e05dd423.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.13\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lock_api","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.13\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblock_api-240f0706d89aaf99.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libzerocopy-266535be110aecf2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcrossbeam_utils-ff8e7173589d9672.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgetrandom-5306cb75712d6b85.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rayon-core-feca7dfa4552b01b\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinyvec_macros","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtinyvec_macros-745604982037d41e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#raw-window-handle@0.6.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\raw-window-handle-0.6.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"raw_window_handle","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\raw-window-handle-0.6.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libraw_window_handle-c46a887de5165dce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.8","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","simd","simd-adler32","with-alloc"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libminiz_oxide-7e3559f2eecfa3c2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default-hasher","inline-more"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhashbrown-2b601a1016c71057.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slotmap@1.0.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slotmap-1.0.7\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slotmap-1.0.7\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\slotmap-431b14f62ed26c16\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\slotmap-431b14f62ed26c16\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\windows_x86_64_msvc-f6a8c61ba1241249\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\windows_x86_64_msvc-f6a8c61ba1241249\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#siphasher@1.0.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-1.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"siphasher","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-1.0.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsiphasher-dc59b4a49a5edf5c.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsiphasher-dc59b4a49a5edf5c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand_core-ed66270a1f5cc10d.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand_core-ed66270a1f5cc10d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytemuck_derive@1.9.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytemuck_derive-1.9.3\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"bytemuck_derive","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytemuck_derive-1.9.3\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\bytemuck_derive-38ea76e398b1ed9b.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\bytemuck_derive-38ea76e398b1ed9b.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\bytemuck_derive-38ea76e398b1ed9b.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\bytemuck_derive-38ea76e398b1ed9b.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_integer","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnum_integer-f3b91426a2984ddd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_sys","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["Win32","Win32_Foundation","Win32_Globalization","Win32_Graphics","Win32_Graphics_Gdi","Win32_Storage","Win32_Storage_FileSystem","Win32_System","Win32_System_Com","Win32_System_Console","Win32_System_SystemInformation","Win32_UI","Win32_UI_Shell","Win32_UI_Shell_Common","Win32_UI_WindowsAndMessaging","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_sys-0987e6bd60a37025.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.11\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.11\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libparking_lot_core-eb7d2fa83f2ea955.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-complex@0.4.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-complex-0.4.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_complex","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-complex-0.4.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnum_complex-710affd861badd00.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.69","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.69\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.69\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\thiserror_impl-e809f94c514fe0ec.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\thiserror_impl-e809f94c514fe0ec.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\thiserror_impl-e809f94c514fe0ec.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\thiserror_impl-e809f94c514fe0ec.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcrossbeam_epoch-e23bb34c9d9bce3d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.52.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_sys","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["Wdk","Wdk_Foundation","Wdk_Storage","Wdk_Storage_FileSystem","Wdk_System","Wdk_System_IO","Win32","Win32_Devices","Win32_Devices_HumanInterfaceDevice","Win32_Foundation","Win32_Globalization","Win32_Graphics","Win32_Graphics_Dwm","Win32_Graphics_Gdi","Win32_Media","Win32_Networking","Win32_Networking_WinSock","Win32_Security","Win32_Storage","Win32_Storage_FileSystem","Win32_System","Win32_System_Com","Win32_System_Com_StructuredStorage","Win32_System_Console","Win32_System_IO","Win32_System_LibraryLoader","Win32_System_Ole","Win32_System_Pipes","Win32_System_SystemInformation","Win32_System_SystemServices","Win32_System_Threading","Win32_System_WindowsProgramming","Win32_UI","Win32_UI_Accessibility","Win32_UI_Controls","Win32_UI_HiDpi","Win32_UI_Input","Win32_UI_Input_Ime","Win32_UI_Input_KeyboardAndMouse","Win32_UI_Input_Pointer","Win32_UI_Input_Touch","Win32_UI_Shell","Win32_UI_TextServices","Win32_UI_WindowsAndMessaging","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_sys-1deb875fbbed1de8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#euclid@0.22.11","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\euclid-0.22.11\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"euclid","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\euclid-0.22.11\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libeuclid-0704fe0b4389247f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.9.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinyvec","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","tinyvec_macros"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtinyvec-c490ad38c3a0f43e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfutures_core-0b407bdde9496332.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0","linked_libs":[],"linked_paths":["native=C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\lib"],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\windows_x86_64_msvc-bd58d948950be4dc\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["small_rng"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand-e6c5d90c9d987023.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand-e6c5d90c9d987023.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#slotmap@1.0.7","linked_libs":[],"linked_paths":[],"cfgs":["has_min_const_generics","nightly"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\slotmap-2c9b870efde7b641\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_shared@0.11.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf_shared-0.11.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_shared","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf_shared-0.11.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libphf_shared-abe00a9ed46ab014.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libphf_shared-abe00a9ed46ab014.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\slab-fde0d11161d72c20\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\slab-fde0d11161d72c20\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytemuck@1.23.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytemuck-1.23.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytemuck","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytemuck-1.23.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aarch64_simd","bytemuck_derive","derive","extern_crate_alloc","min_const_generics"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbytemuck-0f328c5a35240e9f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot-0.12.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot-0.12.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libparking_lot-a354e67c92f24e4f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#primal-check@0.3.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\primal-check-0.3.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"primal_check","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\primal-check-0.3.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libprimal_check-d70b126c64aa5bbe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libthiserror-a6e4498f6dfd3ed1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#transpose@0.2.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\transpose-0.2.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"transpose","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\transpose-0.2.3\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtranspose-ca90fa773875c9b9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-deque-0.8.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_deque","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-deque-0.8.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcrossbeam_deque-3106a4a00ed96d90.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi-util@0.1.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-util-0.1.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winapi_util","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-util-0.1.9\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwinapi_util-ace0504af8e4e073.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.2\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcrc32fast-32dfa7b812e09045.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_sink","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfutures_sink-cc57c04ea1de971c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg_aliases@0.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_aliases-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_aliases","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_aliases-0.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcfg_aliases-519e8f08314783f4.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcfg_aliases-519e8f08314783f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","quote"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\syn-297615ab0d87cbbc\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\syn-297615ab0d87cbbc\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos_api@3.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\khronos_api-3.1.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\khronos_api-3.1.0\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\khronos_api-b0e7fbaf132de09c\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\khronos_api-b0e7fbaf132de09c\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libeither-4e04c71b5900730e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_generator@0.11.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf_generator-0.11.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_generator","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf_generator-0.11.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libphf_generator-b156d2189f7f16fd.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libphf_generator-b156d2189f7f16fd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_x86_64_msvc","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_x86_64_msvc-d2a57b937b893a1e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slotmap@1.0.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slotmap-1.0.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slotmap","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slotmap-1.0.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libslotmap-82e18642725945aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustfft@6.3.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustfft-6.3.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustfft","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustfft-6.3.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["avx","neon","sse"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librustfft-54b228cbee26b832.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librayon_core-daf8f274feb49ced.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\flate2-1.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\flate2-1.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","default","miniz_oxide","rust_backend"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libflate2-83625d46e0c1f4c1.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\syn-735d60c2a4d2bc37\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos_api@3.1.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\khronos_api-77607f2cc841b6b8\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\slab-9969649739eabff6\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom","runtime-rng","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\ahash-4f523876f617d657\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\ahash-4f523876f617d657\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ttf-parser@0.21.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ttf-parser-0.21.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ttf_parser","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ttf-parser-0.21.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["apple-layout","glyph-names","opentype-layout","std","variable-fonts"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libttf_parser-9ae73ca57592aa0b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc-hash@1.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-hash-1.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_hash","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-hash-1.1.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librustc_hash-b39983ae2533e806.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.10.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.10.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbytes-0fb7751aec320709.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memmap2@0.9.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memmap2-0.9.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memmap2","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memmap2-0.9.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libmemmap2-16d4aa6158a5e53d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winreg@0.10.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winreg-0.10.1\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winreg-0.10.1\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winreg-6f55a9a69da4c801\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winreg-6f55a9a69da4c801\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.53.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.53.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_targets","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.53.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_targets-9f45936cf023d680.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_channel","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","futures-sink","sink","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfutures_channel-d19335a05c19e1c7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_macros@0.11.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf_macros-0.11.3\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"phf_macros","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf_macros-0.11.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\phf_macros-6a72881f953af549.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\phf_macros-6a72881f953af549.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\phf_macros-6a72881f953af549.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\phf_macros-6a72881f953af549.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#font-types@0.7.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\font-types-0.7.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"font_types","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\font-types-0.7.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytemuck","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfont_types-338e8c452988fb2b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-core@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-core-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-core-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","opt-simd-avx","opt-simd-neon","opt-simd-sse","rustfft"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_core-cf020ed68c668cc9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon@1.10.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-1.10.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-1.10.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librayon-bf82973b269e87eb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","quote"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsyn-dff1d2e929bee220.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsyn-dff1d2e929bee220.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slab","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libslab-3e233d7d759976f0.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#winreg@0.10.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winreg-bcfe15328917db9c\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","linked_libs":[],"linked_paths":[],"cfgs":["specialize","folded_multiply"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\ahash-73a83baaf85ae87e\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos_api@3.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\khronos_api-3.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"khronos_api","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\khronos_api-3.1.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libkhronos_api-51d6f8d922f5c0ac.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libkhronos_api-51d6f8d922f5c0ac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.9\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsocket2-7a5164f3a4e32227.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mio@1.0.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-1.0.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mio","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-1.0.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["net","os-ext","os-poll"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libmio-f4cc8f5d540cddd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"futures_macro","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\futures_macro-ca940c774f3ff028.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\futures_macro-ca940c774f3ff028.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\futures_macro-ca940c774f3ff028.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\futures_macro-ca940c774f3ff028.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-macros-2.5.0\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tokio_macros","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-macros-2.5.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\tokio_macros-4b3e866f081bca76.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\tokio_macros-4b3e866f081bca76.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\tokio_macros-4b3e866f081bca76.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\tokio_macros-4b3e866f081bca76.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_shared@0.11.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf_shared-0.11.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_shared","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf_shared-0.11.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libphf_shared-2b0aa1d2cd8b7645.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#encoding_rs@0.8.35","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\encoding_rs-0.8.35\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"encoding_rs","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\encoding_rs-0.8.35\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libencoding_rs-4f3ce6607bfa70b2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_task","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfutures_task-0318a42d10c9618f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","rc","serde_derive","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\serde-b690e2d0d5a78fe6\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\serde-b690e2d0d5a78fe6\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_io","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfutures_io-535de18222887846.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_utils","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libpin_utils-8c2b952dd72e675c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-properties@0.1.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-properties-0.1.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_properties","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-properties-0.1.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["general-category"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_properties-c118d59b539cf9bd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblog-2ffaff091ebe6623.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblog-2ffaff091ebe6623.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#palette@0.7.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\palette-0.7.6\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-main","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\palette-0.7.6\\build\\main.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","approx","default","named","named_from_str","phf","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\palette-ee7d940c8d3f1c18\\build-script-main.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\palette-ee7d940c8d3f1c18\\build_script_main.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dark-light@1.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dark-light-1.1.1\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dark-light-1.1.1\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\dark-light-c62b748d516d8221\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\dark-light-c62b748d516d8221\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-script@0.5.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-script-0.5.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_script","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-script-0.5.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_script-7865c2e41f8b38c7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#by_address@1.2.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\by_address-1.2.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"by_address","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\by_address-1.2.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libby_address-c420880ec6bd98f1.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libby_address-c420880ec6bd98f1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ccc@0.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ccc-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ccc","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ccc-0.2.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_ccc-c36db08b08347112.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libequivalent-4321c324b46f9ca6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-bidi-mirroring@0.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-mirroring-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_bidi_mirroring","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-mirroring-0.2.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_bidi_mirroring-038aa796738498fb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xml-rs@0.8.26","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\xml-rs-0.8.26\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xml","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\xml-rs-0.8.26\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libxml-47035f95cf02e246.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libxml-47035f95cf02e246.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\serde-cdbd72a9f2ab3608\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-metadata@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-metadata-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_metadata","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-metadata-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_metadata-7af540230a53423a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#com_macros_support@0.6.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\com_macros_support-0.6.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"com_macros_support","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\com_macros_support-0.6.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcom_macros_support-fbec4ab97e3e5bf6.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcom_macros_support-fbec4ab97e3e5bf6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf@0.11.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf-0.11.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\phf-0.11.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["macros","phf_macros"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libphf-7a2bf937dd4e2b38.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio@1.45.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.45.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.45.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytes","default","fs","full","io-std","io-util","libc","macros","mio","net","parking_lot","process","rt","rt-multi-thread","signal","signal-hook-registry","socket2","sync","time","tokio-macros","windows-sys"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtokio-b858c91245b67ea8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustybuzz@0.14.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustybuzz-0.14.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustybuzz","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustybuzz-0.14.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","libm","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librustybuzz-63b5ebb5d77dd8b5.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#dark-light@1.1.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\dark-light-3cd2abe9d768930b\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gl_generator@0.14.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gl_generator-0.14.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gl_generator","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gl_generator-0.14.0\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgl_generator-fba0f453c611f3ae.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgl_generator-fba0f453c611f3ae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.9.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.9.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.9.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libindexmap-3f9a4bd122685729.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_util","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","async-await-macro","channel","futures-channel","futures-io","futures-macro","futures-sink","io","memchr","sink","slab","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfutures_util-e5c8a36d300c320d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#palette_derive@0.7.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\palette_derive-0.7.6\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"palette_derive","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\palette_derive-0.7.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\palette_derive-7e7e152c4d0b7266.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\palette_derive-7e7e152c4d0b7266.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\palette_derive-7e7e152c4d0b7266.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\palette_derive-7e7e152c4d0b7266.pdb"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#palette@0.7.6","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\palette-d21578154ebc6ba4\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ahash","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom","runtime-rng","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libahash-71afd1c5e234b4f7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winreg@0.10.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winreg-0.10.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winreg","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winreg-0.10.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwinreg-d1d63b04fb6e1b1d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#read-fonts@0.22.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\read-fonts-0.22.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"read_fonts","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\read-fonts-0.22.7\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["experimental_traverse","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libread_fonts-ad9269066590ccd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libloading@0.8.8","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libloading-0.8.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libloading","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libloading-0.8.8\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblibloading-2e0469dcf5926365.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#termcolor@1.4.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\termcolor-1.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"termcolor","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\termcolor-1.4.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtermcolor-cfec92f4a3acc938.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lyon_geom@1.0.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon_geom-1.0.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lyon_geom","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon_geom-1.0.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblyon_geom-f7113aa95f6d2a68.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#approx@0.5.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\approx-0.5.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"approx","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\approx-0.5.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libapprox-9ab3af922799e2c2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\serde_derive-a132089b06404584.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\serde_derive-a132089b06404584.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\serde_derive-a132089b06404584.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\serde_derive-a132089b06404584.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fdeflate@0.3.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fdeflate-0.3.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fdeflate","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fdeflate-0.3.7\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfdeflate-83528f69a59acb50.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg_aliases@0.2.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_aliases-0.2.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_aliases","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_aliases-0.2.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcfg_aliases-b192f1ea4dca3072.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcfg_aliases-b192f1ea4dca3072.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc-hash@2.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-hash-2.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_hash","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-hash-2.1.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librustc_hash-2b3dfbb86364c23e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.18","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.18\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_bidi","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.18\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","hardcoded-data","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_bidi-1c2f22251a833b55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#weezl@0.1.10","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\weezl-0.1.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"weezl","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\weezl-0.1.10\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libweezl-85092692a5c6994f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbyteorder-0c9d22f558fd2257.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.172","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.172\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.172\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libc-075580804091ddd7\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libc-075580804091ddd7\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fast-srgb8@1.0.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fast-srgb8-1.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fast_srgb8","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fast-srgb8-1.0.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfast_srgb8-0e97a2c9105176ae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smol_str@0.2.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smol_str-0.2.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smol_str","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smol_str-0.2.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsmol_str-7f159eee81742ba5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num_cpus@1.17.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num_cpus-1.17.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_cpus","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num_cpus-1.17.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnum_cpus-86c2ae32e47d771f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dark-light@1.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dark-light-1.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dark_light","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dark-light-1.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libdark_light-f4e5011c6e1e5a8f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#png@0.17.16","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\png-0.17.16\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"png","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\png-0.17.16\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libpng-3c468160486b50df.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_wgl_sys@0.5.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glutin_wgl_sys-0.5.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glutin_wgl_sys-0.5.0\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\glutin_wgl_sys-05cd3a476c6e6fd1\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\glutin_wgl_sys-05cd3a476c6e6fd1\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#skrifa@0.22.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\skrifa-0.22.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"skrifa","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\skrifa-0.22.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["autohint_shaping","default","std","traversal"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libskrifa-616d55215b67aa18.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lyon_path@1.0.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon_path-1.0.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lyon_path","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon_path-1.0.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblyon_path-4c9855844d6a0dd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","rc","serde_derive","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libserde-58bbf71cfeda1b2d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#com_macros@0.6.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\com_macros-0.6.0\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"com_macros","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\com_macros-0.6.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\com_macros-cd9d5d0a12df081e.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\com_macros-cd9d5d0a12df081e.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\com_macros-cd9d5d0a12df081e.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\com_macros-cd9d5d0a12df081e.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#palette@0.7.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\palette-0.7.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"palette","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\palette-0.7.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","approx","default","named","named_from_str","phf","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libpalette-ad3f2a6d67ba689f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.172","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libc-1c2488049d47c76f\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_executor","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["num_cpus","std","thread-pool"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfutures_executor-ad014fa463542d92.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#jpeg-decoder@0.3.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jpeg-decoder-0.3.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"jpeg_decoder","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jpeg-decoder-0.3.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["platform_independent","rayon"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libjpeg_decoder-7b239abf4f741814.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-core@0.52.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-core-0.52.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-core-0.52.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_core-76304477c6ad128d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos-egl@6.0.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\khronos-egl-6.0.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\khronos-egl-6.0.0\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["1_0","1_1","1_2","1_3","1_4","1_5","default","dynamic","libloading"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\khronos-egl-7b200f9fc2637c86\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\khronos-egl-7b200f9fc2637c86\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.12.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.12.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_segmentation","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.12.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_segmentation-bec0e781e4d9aa32.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#allocator-api2@0.2.21","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\allocator-api2-0.2.21\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"allocator_api2","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\allocator-api2-0.2.21\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liballocator_api2-b6247c8790082086.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yazi@0.1.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\yazi-0.1.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yazi","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\yazi-0.1.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libyazi-27d82ca764fbc488.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ttf-parser@0.20.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ttf-parser-0.20.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ttf_parser","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ttf-parser-0.20.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["apple-layout","glyph-names","opentype-layout","std","variable-fonts"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libttf_parser-e62ab8b4daf7922c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#color_quant@1.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color_quant-1.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"color_quant","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color_quant-1.1.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcolor_quant-48fb65e1dee6f02e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#float-cmp@0.9.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\float-cmp-0.9.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"float_cmp","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\float-cmp-0.9.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfloat_cmp-98510b0b829c1b3e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zeno@0.2.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeno-0.2.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zeno","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeno-0.2.3\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["eval"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libzeno-b0ed852ecc9503fe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#web-time@1.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\web-time-1.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"web_time","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\web-time-1.1.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libweb_time-84fee6c2124b34cd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ash@0.37.3+1.3.251","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ash-0.37.3+1.3.251\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ash-0.37.3+1.3.251\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["debug","default","libloading","loaded"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\ash-b55ec2ecd7f35d43\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\ash-b55ec2ecd7f35d43\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.1.14","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.14\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_width","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.14\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cjk","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_width-97545ca8dd1ef851.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bit-vec@0.6.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit-vec-0.6.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bit_vec","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit-vec-0.6.3\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbit_vec-a31691426a290c46.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glam@0.25.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glam-0.25.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glam","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glam-0.25.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libglam-7ca6f601816b8a7a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.172","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.172\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.172\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblibc-8a82bdaf2702529e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#codespan-reporting@0.11.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\codespan-reporting-0.11.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"codespan_reporting","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\codespan-reporting-0.11.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcodespan_reporting-340cb76baf1017cb.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ash@0.37.3+1.3.251","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\ash-7e287135b6746969\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","allocator-api2","default","inline-more"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhashbrown-b078b32384f16bb7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fontdb@0.16.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fontdb-0.16.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fontdb","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fontdb-0.16.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fontconfig","fontconfig-parser","fs","memmap","memmap2","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfontdb-ba19ad692a1a8a11.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows@0.52.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-0.52.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-0.52.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["Win32","Win32_Foundation","Win32_Graphics","Win32_Graphics_Direct3D","Win32_Graphics_Direct3D12","Win32_Graphics_Dxgi","Win32_Graphics_Dxgi_Common","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows-d8b19daa25b4e80e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#swash@0.1.19","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\swash-0.1.19\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"swash","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\swash-0.1.19\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","render","scale"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libswash-c25ac8d06f522b9d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos-egl@6.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\khronos-egl-a9082c00af8665c8\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gif@0.13.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gif-0.13.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gif","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gif-0.13.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["color_quant","default","raii_no_panic","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgif-7ff9e093ff47de5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strict-num@0.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strict-num-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strict_num","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strict-num-0.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["approx-eq","default","float-cmp"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libstrict_num-a88a6ed81cccf0b3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures@0.3.31","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","default","executor","futures-executor","std","thread-pool"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfutures-8c4f0d4f99e2cb67.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#com@0.6.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\com-0.6.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"com","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\com-0.6.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","production","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcom-a01c5f44110cde0a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_wgl_sys@0.5.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\glutin_wgl_sys-9a5855f3fc34c268\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu-hal@0.19.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-hal-0.19.5\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-hal-0.19.5\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ash","bit-set","block","d3d12","default","dx12","dxc_shader_compiler","gles","glow","glutin_wgl_sys","gpu-alloc","gpu-allocator","gpu-descriptor","hassle-rs","khronos-egl","libloading","link","metal","range-alloc","renderdoc","renderdoc-sys","smallvec","vulkan","windows_rs"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-hal-40ecc43584dbcfaf\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-hal-40ecc43584dbcfaf\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_core@0.13.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_core-0.13.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_core-0.13.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["advanced","auto-detect-theme"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_core-976d749c56778e58.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bit-set@0.5.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit-set-0.5.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bit_set","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit-set-0.5.3\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbit_set-0ab9acef20270fe9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libloading@0.7.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libloading-0.7.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libloading","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libloading-0.7.4\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblibloading-1f14c02a3efd0aec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zune-inflate@0.2.54","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zune-inflate-0.2.54\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zune_inflate","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zune-inflate-0.2.54\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd-adler32","zlib"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libzune_inflate-4ed8ee7a5762fdaf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#half@2.6.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-2.6.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"half","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-2.6.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhalf-4a6cb3476860c565.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gpu-descriptor-types@0.1.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-descriptor-types-0.1.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gpu_descriptor_types","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-descriptor-types-0.1.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgpu_descriptor_types-9f3a73271cafd672.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gpu-alloc-types@0.3.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-alloc-types-0.3.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gpu_alloc_types","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-alloc-types-0.3.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgpu_alloc_types-648c90da93acf384.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#spirv@0.3.0+sdk-1.3.268.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spirv-0.3.0+sdk-1.3.268.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"spirv","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spirv-0.3.0+sdk-1.3.268.0\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libspirv-46d272fbb6c90a51.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sys-locale@0.3.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sys-locale-0.3.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sys_locale","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sys-locale-0.3.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsys_locale-a93f6eea08edf965.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#presser@0.3.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\presser-0.3.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"presser","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\presser-0.3.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libpresser-68efa85fc5775a05.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_xid","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.6\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_xid-5622ffce1902b7c5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrayref@0.3.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arrayref-0.3.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrayref","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arrayref-0.3.9\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libarrayref-0547423a9ffd0827.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bit_field@0.10.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit_field-0.10.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bit_field","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit_field-0.10.2\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbit_field-bc5908379c45a370.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lebe@0.5.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lebe-0.5.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lebe","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lebe-0.5.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblebe-5ff9cd273cb2eb9d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#widestring@1.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\widestring-1.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"widestring","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\widestring-1.2.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwidestring-fab174fb18b944f8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rangemap@1.5.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rangemap-1.5.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rangemap","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rangemap-1.5.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librangemap-7b33dc72a81b84d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hexf-parse@0.2.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hexf-parse-0.2.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hexf_parse","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hexf-parse-0.2.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhexf_parse-e3d785127c61a6f2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-linebreak@0.1.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-linebreak-0.1.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_linebreak","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-linebreak-0.1.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_linebreak-1b9d5032c5806bff.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#self_cell@1.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\self_cell-1.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"self_cell","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\self_cell-1.2.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libself_cell-59dacd4cacfdd9f6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#exr@1.73.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\exr-1.73.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"exr","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\exr-1.73.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libexr-9bc9c6752d05e1d9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gpu-descriptor@0.2.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-descriptor-0.2.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gpu_descriptor","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-descriptor-0.2.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgpu_descriptor-babfb3689c17605c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hassle-rs@0.11.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hassle-rs-0.11.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hassle_rs","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hassle-rs-0.11.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhassle_rs-3d9d966b68a0c19b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tiny-skia-path@0.11.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tiny-skia-path-0.11.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tiny_skia_path","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tiny-skia-path-0.11.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtiny_skia_path-45823f9dc634075c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gpu-allocator@0.25.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-allocator-0.25.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gpu_allocator","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-allocator-0.25.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["d3d12","public-winapi","windows"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgpu_allocator-bb30fc47f9f52f2f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ash@0.37.3+1.3.251","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ash-0.37.3+1.3.251\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ash","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ash-0.37.3+1.3.251\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["debug","default","libloading","loaded"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libash-c31113324fb847ac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gpu-alloc@0.6.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-alloc-0.6.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gpu_alloc","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gpu-alloc-0.6.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgpu_alloc-8aab384d6387a9d6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_futures@0.13.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_futures-0.13.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_futures","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_futures-0.13.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["thread-pool","tokio"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_futures-21295fb0132fe80a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu-hal@0.19.5","linked_libs":[],"linked_paths":[],"cfgs":["native","send_sync","dx12","gles","vulkan"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-hal-3535c9f952f0db31\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glutin_wgl_sys@0.5.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glutin_wgl_sys-0.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glutin_wgl_sys","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glutin_wgl_sys-0.5.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libglutin_wgl_sys-526128267eb9e3ff.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#khronos-egl@6.0.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\khronos-egl-6.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"khronos_egl","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\khronos-egl-6.0.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["1_0","1_1","1_2","1_3","1_4","1_5","default","dynamic","libloading"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libkhronos_egl-d32e412468bb57df.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tiff@0.9.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tiff-0.9.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tiff","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tiff-0.9.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtiff-8d4970ed66a98c47.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#d3d12@0.19.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\d3d12-0.19.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"d3d12","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\d3d12-0.19.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["libloading"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libd3d12-c9301d5c8704c6f7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#naga@0.19.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\naga-0.19.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"naga","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\naga-0.19.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone","compact","default","glsl-out","hexf-parse","hlsl-out","msl-out","spirv","spv-out","unicode-xid","wgsl-in"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnaga-aaf391750a1dc256.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cosmic-text@0.12.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cosmic-text-0.12.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cosmic_text","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cosmic-text-0.12.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fontconfig","rayon","std","swash","sys-locale"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcosmic_text-f49578ce359dde2d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu-core@0.19.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-core-0.19.4\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-core-0.19.4\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","dx12","gles","link","metal","raw-window-handle","vulkan","wgsl"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-core-6f720f8b0b45ab87\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-core-6f720f8b0b45ab87\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#qoi@0.4.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\qoi-0.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"qoi","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\qoi-0.4.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libqoi-829c0685fff11852.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#kurbo@0.11.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kurbo-0.11.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kurbo","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kurbo-0.11.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libkurbo-0e99f64145819036.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu-types@0.19.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-types-0.19.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wgpu_types","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-types-0.19.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwgpu_types-2363c7ceae6104fa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glow@0.13.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glow-0.13.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glow","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glow-0.13.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libglow-d04677c261343e89.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#renderdoc-sys@1.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\renderdoc-sys-1.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"renderdoc_sys","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\renderdoc-sys-1.1.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librenderdoc_sys-453830ec41796482.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#profiling@1.0.16","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\profiling-1.0.16\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"profiling","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\profiling-1.0.16\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libprofiling-9366b286c10aab91.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#range-alloc@0.1.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\range-alloc-0.1.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"range_alloc","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\range-alloc-0.1.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librange_alloc-cff3aa11cccd5848.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mutate_once@0.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mutate_once-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mutate_once","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mutate_once-0.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libmutate_once-d5fe6b6f26208e48.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-utils-xiph@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-utils-xiph-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_utils_xiph","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-utils-xiph-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_utils_xiph-a5a729e3223bf91c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fontdb@0.18.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fontdb-0.18.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fontdb","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fontdb-0.18.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fontconfig","fontconfig-parser","fs","memmap","memmap2","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfontdb-861d05a1504878f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu@0.19.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-0.19.4\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-0.19.4\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","dx12","metal","webgpu","wgsl"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-e9ca982467e0cf0c\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-e9ca982467e0cf0c\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libppv_lite86-046fb456b8da5e17.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simplecss@0.2.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\simplecss-0.2.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simplecss","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\simplecss-0.2.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsimplecss-8efda1ed3bd921c1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#svgtypes@0.15.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\svgtypes-0.15.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"svgtypes","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\svgtypes-0.15.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsvgtypes-e31feb1efdc269ee.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu-core@0.19.4","linked_libs":[],"linked_paths":[],"cfgs":["send_sync","dx12","gles","vulkan"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-core-219486a6cc3be961\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#kamadak-exif@0.5.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kamadak-exif-0.5.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"exif","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kamadak-exif-0.5.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libexif-59da8884e922b172.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu-hal@0.19.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-hal-0.19.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wgpu_hal","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-hal-0.19.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ash","bit-set","block","d3d12","default","dx12","dxc_shader_compiler","gles","glow","glutin_wgl_sys","gpu-alloc","gpu-allocator","gpu-descriptor","hassle-rs","khronos-egl","libloading","link","metal","range-alloc","renderdoc","renderdoc-sys","smallvec","vulkan","windows_rs"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwgpu_hal-444239db7701b34d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#image@0.24.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\image-0.24.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"image","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\image-0.24.9\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bmp","dds","default","dxt","exr","farbfeld","gif","hdr","ico","jpeg","jpeg_rayon","openexr","png","pnm","qoi","tga","tiff","webp"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libimage-70ad07c1cbda3484.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#svg_fmt@0.4.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\svg_fmt-0.4.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"svg_fmt","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\svg_fmt-0.4.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsvg_fmt-7dfa14cf39091657.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#data-url@0.3.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\data-url-0.3.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"data_url","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\data-url-0.3.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libdata_url-f09ef48ade3ab2e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libbase64-c6b1e4633ed34f47.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xmlwriter@0.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\xmlwriter-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xmlwriter","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\xmlwriter-0.1.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libxmlwriter-e47cc19113b8233b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#roxmltree@0.20.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\roxmltree-0.20.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"roxmltree","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\roxmltree-0.20.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","positions","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libroxmltree-b130a8f87d5212ba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#imagesize@0.12.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\imagesize-0.12.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"imagesize","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\imagesize-0.12.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libimagesize-d31c1409caf4ae9d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-vo@0.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-vo-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_vo","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-vo-0.1.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libunicode_vo-bb46c1088cb6a788.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pico-args@0.5.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pico-args-0.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pico_args","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pico-args-0.5.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","eq-separator"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libpico_args-ab4bf18387bfec2d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu@0.19.4","linked_libs":[],"linked_paths":[],"cfgs":["native","wgpu_core","send_sync","dx12"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\wgpu-c616256d8c186282\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tiny-skia@0.11.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tiny-skia-0.11.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tiny_skia","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tiny-skia-0.11.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","png","png-format","simd","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtiny_skia-eb72a83cca2ef380.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#softbuffer@0.4.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\softbuffer-0.4.6\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\softbuffer-0.4.6\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["as-raw-xcb-connection","bytemuck","default","drm","fastrand","kms","memmap2","rustix","tiny-xlib","wayland","wayland-backend","wayland-client","wayland-dlopen","wayland-sys","x11","x11-dlopen","x11rb"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\softbuffer-9e98e0a4e3838365\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\softbuffer-9e98e0a4e3838365\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#usvg@0.42.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\usvg-0.42.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"usvg","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\usvg-0.42.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fontdb","memmap-fonts","rustybuzz","system-fonts","text","unicode-bidi","unicode-script","unicode-vo"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libusvg-c91749f946863ac4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_graphics@0.13.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_graphics-0.13.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_graphics","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_graphics-0.13.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fira-sans","geometry","image","kamadak-exif","lyon_path","svg"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_graphics-65658fbb5643aaf2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu-core@0.19.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-core-0.19.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wgpu_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-core-0.19.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","dx12","gles","link","metal","raw-window-handle","vulkan","wgsl"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwgpu_core-8c6411982be8f38f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rgb@0.8.50","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rgb-0.8.50\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rgb","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rgb-0.8.50\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["argb","as-bytes","bytemuck","default","grb"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librgb-4163f6f0c3e2e756.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","once_cell","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtracing_core-e5daa0d8c3b8afe5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#float_next_after@1.0.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\float_next_after-1.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"float_next_after","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\float_next_after-1.0.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfloat_next_after-9334683afaa130f7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libshlex-a918df6411f507de.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libshlex-a918df6411f507de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"static_assertions","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libstatic_assertions-9cce7c9104bbf1db.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#softbuffer@0.4.6","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\softbuffer-a09d052feca4b858\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#etagere@0.2.15","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\etagere-0.2.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"etagere","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\etagere-0.2.15\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libetagere-518e0265d36b629e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lyon_algorithms@1.0.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon_algorithms-1.0.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lyon_algorithms","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon_algorithms-1.0.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblyon_algorithms-7763ad9864394f7b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.28","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.28\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tracing_attributes","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.28\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\tracing_attributes-75f2b9d33ecffabb.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\tracing_attributes-75f2b9d33ecffabb.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\tracing_attributes-75f2b9d33ecffabb.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\tracing_attributes-75f2b9d33ecffabb.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#vcpkg@0.2.15","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"vcpkg","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libvcpkg-066dd131759a4251.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libvcpkg-066dd131759a4251.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lru@0.12.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lru-0.12.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lru","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lru-0.12.5\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblru-c311a33ba333ae6c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.32","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.32\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pkg_config","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.32\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libpkg_config-dc03a79ea1264ab2.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libpkg_config-dc03a79ea1264ab2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#guillotiere@0.6.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\guillotiere-0.6.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"guillotiere","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\guillotiere-0.6.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libguillotiere-680e9197b992cf8a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lyon_tessellation@1.0.15","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon_tessellation-1.0.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lyon_tessellation","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon_tessellation-1.0.15\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblyon_tessellation-1f9b8c0da337391d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.25","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.25\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.25\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcc-b9f50b70614e93ec.rlib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcc-b9f50b70614e93ec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#resvg@0.42.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\resvg-0.42.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"resvg","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\resvg-0.42.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","gif","jpeg-decoder","memmap-fonts","raster-images","system-fonts","text"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libresvg-574b4d9cff70dcb7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wgpu@0.19.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-0.19.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wgpu","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wgpu-0.19.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","dx12","metal","webgpu","wgsl"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwgpu-8107af1ace87fa7d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#softbuffer@0.4.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\softbuffer-0.4.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"softbuffer","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\softbuffer-0.4.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["as-raw-xcb-connection","bytemuck","default","drm","fastrand","kms","memmap2","rustix","tiny-xlib","wayland","wayland-backend","wayland-client","wayland-dlopen","wayland-sys","x11","x11-dlopen","x11rb"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsoftbuffer-ae09925f904f1876.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["attributes","default","std","tracing-attributes"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtracing-15375be089b445f3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winit@0.30.11","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winit-0.30.11\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winit-0.30.11\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","bytemuck","default","memmap2","percent-encoding","rwh_06","sctk","sctk-adwaita","wayland","wayland-backend","wayland-client","wayland-csd-adwaita","wayland-dlopen","wayland-protocols","wayland-protocols-plasma","x11","x11-dl","x11rb"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winit-bf0785c8bca3dfb2\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winit-bf0785c8bca3dfb2\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-result@0.1.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-result-0.1.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_result","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-result-0.1.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_result-7a59a18a44058859.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand_core-7d018ebcc2799463.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#kurbo@0.10.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kurbo-0.10.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kurbo","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kurbo-0.10.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libkurbo-8fda684b08729554.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#error-code@3.3.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-code-3.3.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"error_code","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-code-3.3.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liberror_code-9d8de85fd89e8ada.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_runtime@0.13.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_runtime-0.13.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_runtime","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_runtime-0.13.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_runtime-9286d04a557638e8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-1.1.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-1.1.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libaho_corasick-eedab2244afccbf1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.16","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.16\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.16\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libgetrandom-29b006c7557aabf9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dpi@0.1.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dpi-0.1.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dpi","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dpi-0.1.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libdpi-c2560cd9cb05a579.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#extended@0.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\extended-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"extended","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\extended-0.1.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libextended-9c8fc7bb79a8be03.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lyon@1.0.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon-1.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lyon","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lyon-1.0.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblyon-86fa04f9e4a96cbc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bundled","bundled_bindings","cc","default","min_sqlite_version_3_14_0","pkg-config","vcpkg"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libsqlite3-sys-953c0b823f5cbb3f\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libsqlite3-sys-953c0b823f5cbb3f\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_glyphon@0.6.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_glyphon-0.6.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_glyphon","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_glyphon-0.6.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_glyphon-593f21e26f0096c8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-core@0.54.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-core-0.54.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-core-0.54.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_core-c0b5b37e71e7676f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_tiny_skia@0.13.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_tiny_skia-0.13.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_tiny_skia","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_tiny_skia-0.13.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["geometry","image","resvg","svg"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_tiny_skia-084a619e0aa9fd1d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand_chacha-b2ecbf28bd22a88e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#winit@0.30.11","linked_libs":[],"linked_paths":[],"cfgs":["windows_platform"],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\winit-29896d427b53b6b9\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clipboard-win@5.4.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\clipboard-win-5.4.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clipboard_win","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\clipboard-win-5.4.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libclipboard_win-e34219ecc3c6fceb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","unicode-case","unicode-perl"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libregex_syntax-8f79c21f69b6ccd3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-link@0.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-link-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_link","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-link-0.1.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows_link-606c1319d892e671.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpal@0.15.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpal-0.15.3\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpal-0.15.3\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\cpal-e32ae662adef99f7\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\cpal-e32ae662adef99f7\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cursor-icon@1.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cursor-icon-1.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cursor_icon","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cursor-icon-1.2.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcursor_icon-5917e46488d34461.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand_core-886541ae98a31370.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-format-riff@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-riff-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_format_riff","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-riff-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aiff","wav"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_format_riff-354f4941aee57c25.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-format-isomp4@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-isomp4-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_format_isomp4","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-isomp4-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_format_isomp4-15d8a4ec6c17d9c0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-codec-vorbis@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-vorbis-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_codec_vorbis","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-vorbis-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_codec_vorbis-8eb57a59041bd628.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_wgpu@0.13.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_wgpu-0.13.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_wgpu","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_wgpu-0.13.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["geometry","image","lyon","resvg","svg"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_wgpu-4b621b09bc04697e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0","linked_libs":["static=sqlite3"],"linked_paths":["native=C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libsqlite3-sys-c829dd7af0b51125\\out"],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\libsqlite3-sys-c829dd7af0b51125\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winit@0.30.11","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winit-0.30.11\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winit","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winit-0.30.11\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","bytemuck","default","memmap2","percent-encoding","rwh_06","sctk","sctk-adwaita","wayland","wayland-backend","wayland-client","wayland-csd-adwaita","wayland-dlopen","wayland-protocols","wayland-protocols-plasma","x11","x11-dl","x11rb"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwinit-4d215d0f157d656f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.9.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","os_rng","small_rng","std","std_rng","thread_rng"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand-ac14f19d3765c76a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.9\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode-case","unicode-perl","unicode-word-boundary"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libregex_automata-7d5d414f94bdb606.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.41","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\chrono-0.4.41\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\chrono-0.4.41\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","android-tzdata","clock","default","iana-time-zone","js-sys","now","oldtime","serde","std","wasm-bindgen","wasmbind","winapi","windows-link"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libchrono-8a30d7fe708bba43.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#window_clipboard@0.4.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\window_clipboard-0.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"window_clipboard","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\window_clipboard-0.4.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindow_clipboard-ec85770418be73ba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows@0.54.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-0.54.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-0.54.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["Win32","Win32_Devices","Win32_Devices_Properties","Win32_Foundation","Win32_Media","Win32_Media_Audio","Win32_Media_KernelStreaming","Win32_Media_Multimedia","Win32_Security","Win32_System","Win32_System_Com","Win32_System_Com_StructuredStorage","Win32_System_SystemServices","Win32_System_Threading","Win32_System_Variant","Win32_UI","Win32_UI_Shell","Win32_UI_Shell_PropertiesSystem","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwindows-71173a62bafbfb66.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpal@0.15.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\cpal-138bd31a6371a122\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-format-ogg@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-ogg-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_format_ogg","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-ogg-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_format_ogg-a019983bef46d154.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-format-mkv@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-mkv-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_format_mkv","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-mkv-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_format_mkv-089bb042481ce357.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-bundle-flac@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-bundle-flac-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_bundle_flac","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-bundle-flac-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_bundle_flac-375d0d523c3b73d3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_spanned@0.6.8","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_spanned-0.6.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_spanned","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_spanned-0.6.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libserde_spanned-0a725cf3a9be67f6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_datetime","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.9\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtoml_datetime-302e7262aaf24b13.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ogg@0.8.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ogg-0.8.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ogg","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ogg-0.8.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libogg-25be1d3ac84d4c90.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-bundle-mp3@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-bundle-mp3-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_bundle_mp3","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-bundle-mp3-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["mp1","mp2","mp3"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_bundle_mp3-f0a15b327ff77246.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_renderer@0.13.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_renderer-0.13.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_renderer","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_renderer-0.13.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fira-sans","geometry","iced_tiny_skia","iced_wgpu","image","svg","tiny-skia","wgpu"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_renderer-af9d32ebf0ef8429.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libsqlite3_sys","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bundled","bundled_bindings","cc","default","min_sqlite_version_3_14_0","pkg-config","vcpkg"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblibsqlite3_sys-c2b8159316396f46.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-format-caf@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-caf-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_format_caf","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-format-caf-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_format_caf-6a84fcf45f3d3350.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-codec-alac@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-alac-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_codec_alac","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-alac-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_codec_alac-516445d7672078c2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-codec-pcm@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-pcm-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_codec_pcm","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-pcm-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_codec_pcm-3a059bd62c96cd21.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-codec-aac@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-aac-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_codec_aac","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-aac-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_codec_aac-8e26da38be629fb2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia-codec-adpcm@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-adpcm-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia_codec_adpcm","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-codec-adpcm-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia_codec_adpcm-e5d3fea48ab12b9a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scheduled-thread-pool@0.2.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scheduled-thread-pool-0.2.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scheduled_thread_pool","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scheduled-thread-pool-0.2.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libscheduled_thread_pool-2d2009e1255b8812.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.4.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_bigint","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnum_bigint-d0ddee3b16ae100b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashlink@0.10.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashlink-0.10.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashlink","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashlink-0.10.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhashlink-e16906405c41c58f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#option-ext@0.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\option-ext-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"option_ext","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\option-ext-0.2.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liboption_ext-5de2a4256613b510.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dasp_sample@0.11.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dasp_sample-0.11.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dasp_sample","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dasp_sample-0.11.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libdasp_sample-ef9eb5c13a491dcf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_write@0.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_write-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_write","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_write-0.1.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtoml_write-6e64fb8d2ff299aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fallible-streaming-iterator@0.1.9","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-streaming-iterator-0.1.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fallible_streaming_iterator","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-streaming-iterator-0.1.9\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfallible_streaming_iterator-7f762db46e923fde.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fallible-iterator@0.3.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-iterator-0.3.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fallible_iterator","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-iterator-0.3.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfallible_iterator-0c1b838f0f71e1f3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\serde_json-be641a788929b5a0\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\serde_json-be641a788929b5a0\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#humantime@2.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\humantime-2.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"humantime","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\humantime-2.2.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhumantime-663958cefbbf320b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.6.29","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.6.29\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.6.29\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libregex_syntax-350929217d90bff4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.10","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.7.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.7.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwinnow-ab37ca4b0312fa73.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_widget@0.13.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_widget-0.13.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_widget","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_widget-0.13.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["advanced","canvas","image","svg","wgpu"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_widget-38932b60ba81137b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpal@0.15.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpal-0.15.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpal","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpal-0.15.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libcpal-25ebbc3355f7d302.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#symphonia@0.5.4","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-0.5.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"symphonia","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\symphonia-0.5.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aac","adpcm","aiff","alac","all-codecs","all-formats","caf","default","flac","isomp4","mkv","mp1","mp2","mp3","ogg","opt-simd","opt-simd-avx","opt-simd-neon","opt-simd-sse","pcm","symphonia-bundle-flac","symphonia-bundle-mp3","symphonia-codec-aac","symphonia-codec-adpcm","symphonia-codec-alac","symphonia-codec-pcm","symphonia-codec-vorbis","symphonia-format-caf","symphonia-format-isomp4","symphonia-format-mkv","symphonia-format-ogg","symphonia-format-riff","vorbis","wav"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsymphonia-acf1e1cd6c8c674b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#r2d2@0.8.10","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\r2d2-0.8.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"r2d2","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\r2d2-0.8.10\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libr2d2-c5e3c212c93da3b6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dirs-sys@0.5.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dirs-sys-0.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dirs_sys","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dirs-sys-0.5.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libdirs_sys-cdec04c1fe3ce914.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-rational@0.4.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-rational-0.4.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_rational","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-rational-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["num-bigint","num-bigint-std","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnum_rational-dadf1b2f9feb3c61.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\serde_json-c421ce97b2bb254c\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rusqlite@0.36.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rusqlite-0.36.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rusqlite","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rusqlite-0.36.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bundled","chrono","modern_sqlite"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librusqlite-20371fe042770757.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.11.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.11.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode-case","unicode-perl"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libregex-3a456c6d8cd3f566.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lewton@0.10.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lewton-0.10.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lewton","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lewton-0.10.2\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","ogg"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liblewton-bebf469c6b7e25b3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced_winit@0.13.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_winit-0.13.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced_winit","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_winit-0.13.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","program","wayland","wayland-csd-adwaita","wayland-dlopen","x11"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced_winit-12bde8e3cbe5888e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.17.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.17.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.17.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fast-rng","rng","serde","std","v4","v7"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libuuid-1cb1db8a937de7fa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.3.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.3.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand_chacha-690134707a55e70b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.26","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.22.26\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_edit","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.22.26\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["display","parse","serde"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtoml_edit-c4193b8ad8d01e6d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.1.10","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.1.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.1.10\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","regex-syntax","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libregex_automata-044a268bf6143f7f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\same-file-1.0.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\same-file-1.0.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsame_file-1041662cec84dfb6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-iter@0.1.45","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-iter-0.1.45\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_iter","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-iter-0.1.45\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnum_iter-2af2fafb40e2c06a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libitoa-53eb272c646ddda3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#overload@0.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\overload-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"overload","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\overload-0.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\liboverload-e7d714b0d973fc28.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rfd@0.15.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfd-0.15.3\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfd-0.15.3\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ashpd","async-std","default","pollster","urlencoding","xdg-portal"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rfd-237ec4ee45da5311\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rfd-237ec4ee45da5311\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libryu-9eaef482906fa0cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hound@3.5.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hound-3.5.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hound","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hound-3.5.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhound-1193d55c10da0e47.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#claxon@0.4.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\claxon-0.4.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"claxon","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\claxon-0.4.3\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libclaxon-7359a7149182e92a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","libc","rand_chacha","std","std_rng"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librand-17a0a8ab8d7d3d91.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#r2d2_sqlite@0.29.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\r2d2_sqlite-0.29.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"r2d2_sqlite","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\r2d2_sqlite-0.29.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libr2d2_sqlite-e8d8810160c05180.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dirs@6.0.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dirs-6.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dirs","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dirs-6.0.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libdirs-12cf08135d6e1e11.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#humantime-serde@1.1.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\humantime-serde-1.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"humantime_serde","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\humantime-serde-1.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libhumantime_serde-b68c02644d886fef.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iced@0.13.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced-0.13.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iced","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced-0.13.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["advanced","auto-detect-theme","canvas","default","fira-sans","image","image-without-codecs","svg","tiny-skia","tokio","wgpu"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libiced-92281de8951d404a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-log@0.2.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-log-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_log","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-log-0.2.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["log-tracer","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtracing_log-160e7d3dd20b8bad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rodio@0.20.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rodio-0.20.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rodio","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rodio-0.20.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["claxon","default","flac","hound","lewton","mp3","symphonia","symphonia-mp3","vorbis","wav"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librodio-607dc3ab4e201a11.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libserde_json-1e94fc43933148bd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchers@0.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchers-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchers","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchers-0.1.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libmatchers-f2b8af708888ff5c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nu-ansi-term@0.46.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nu-ansi-term-0.46.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nu_ansi_term","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nu-ansi-term-0.46.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnu_ansi_term-2afc7463cdc0c2ba.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rfd@0.15.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\rfd-0a285c6cfd065fce\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num@0.4.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-0.4.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-0.4.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","num-bigint","std"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libnum-39a3ddcb048fa1e8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\walkdir-2.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\walkdir-2.5.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libwalkdir-c2a4587caf3952a1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml@0.8.22","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml-0.8.22\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml-0.8.22\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","display","parse"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtoml-3ccb5c8993100535.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-stream@0.1.17","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-stream-0.1.17\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_stream","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-stream-0.1.17\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","time"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtokio_stream-569008005467c65a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.15","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_util","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.15\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtokio_util-e130c481ecca8227.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#is-terminal@0.4.16","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\is-terminal-0.4.16\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"is_terminal","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\is-terminal-0.4.16\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libis_terminal-1822e5711182a65d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.88","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.88\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_trait","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.88\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\async_trait-55bd5f7edffa394b.dll","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\async_trait-55bd5f7edffa394b.dll.lib","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\async_trait-55bd5f7edffa394b.dll.exp","C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\async_trait-55bd5f7edffa394b.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sharded_slab","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libsharded_slab-69e37221e4c18aff.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.8","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thread_local","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libthread_local-11d08aea6e94989b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\abop-gui-0a5896392b000621\\build-script-build.exe","C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\abop-gui-0a5896392b000621\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#font-awesome@0.1.0","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\font-awesome-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"font_awesome","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\font-awesome-0.1.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libfont_awesome-b4feebea8b495cd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.19","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.19\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_subscriber","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.19\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ansi","default","env-filter","fmt","matchers","nu-ansi-term","once_cell","regex","registry","sharded-slab","smallvec","std","thread_local","tracing","tracing-log"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libtracing_subscriber-a076d209fb61e894.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:83:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_mut)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":2948,"byte_start":2944,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":2952,"byte_start":2944,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:100:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":3598,"byte_start":3594,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":100,"line_start":100,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":3602,"byte_start":3594,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":100,"line_start":100,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:115:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":4234,"byte_start":4230,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":115,"line_start":115,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":4238,"byte_start":4230,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":115,"line_start":115,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:154:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":5836,"byte_start":5832,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":154,"line_start":154,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":5840,"byte_start":5832,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":154,"line_start":154,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:187:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":7162,"byte_start":7158,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":187,"line_start":187,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":7166,"byte_start":7158,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":187,"line_start":187,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:264:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":10049,"byte_start":10045,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":264,"line_start":264,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":10053,"byte_start":10045,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":264,"line_start":264,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:278:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":10585,"byte_start":10581,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":278,"line_start":278,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":10589,"byte_start":10581,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":278,"line_start":278,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:295:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":11187,"byte_start":11183,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":295,"line_start":295,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":11191,"byte_start":11183,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":295,"line_start":295,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:385:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":14556,"byte_start":14552,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":385,"line_start":385,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":14560,"byte_start":14552,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":385,"line_start":385,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\audiobook.rs:406:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":15374,"byte_start":15370,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":406,"line_start":406,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":15378,"byte_start":15370,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\audiobook.rs","is_primary":true,"label":null,"line_end":406,"line_start":406,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.conn.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\library.rs:39:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":1300,"byte_start":1296,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":39,"line_start":39,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":1304,"byte_start":1296,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":39,"line_start":39,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\library.rs:70:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":2365,"byte_start":2361,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":70,"line_start":70,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":2369,"byte_start":2361,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\library.rs:91:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":3128,"byte_start":3124,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":91,"line_start":91,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":3132,"byte_start":3124,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":91,"line_start":91,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\library.rs:112:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":3871,"byte_start":3867,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":112,"line_start":112,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":3875,"byte_start":3867,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":112,"line_start":112,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\library.rs:139:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":4926,"byte_start":4922,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":139,"line_start":139,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":4930,"byte_start":4922,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\repositories\\library.rs:170:13: warning: variable does not need to be mutable\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":6080,"byte_start":6076,"column_end":17,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":170,"line_start":170,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":6084,"byte_start":6076,"column_end":21,"column_start":13,"expansion":null,"file_name":"abop-core\\src\\db\\repositories\\library.rs","is_primary":true,"label":null,"line_end":170,"line_start":170,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let mut conn = self.connection.lock().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\db\\retry.rs:162:4: warning: function `is_retryable_error` is never used\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(dead_code)]` on by default","rendered":null,"spans":[]}],"code":{"code":"dead_code","explanation":null},"level":"warning","message":"function `is_retryable_error` is never used","spans":[{"byte_end":5514,"byte_start":5496,"column_end":22,"column_start":4,"expansion":null,"file_name":"abop-core\\src\\db\\retry.rs","is_primary":true,"label":null,"line_end":162,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":4,"text":"fn is_retryable_error(error: &DatabaseError) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:23:5: warning: field `batch_size` is never read\n","$message_type":"diagnostic","children":[],"code":{"code":"dead_code","explanation":null},"level":"warning","message":"field `batch_size` is never read","spans":[{"byte_end":590,"byte_start":576,"column_end":26,"column_start":12,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":false,"label":"field in this struct","line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":12,"text":"pub struct LibraryScanner {"}]},{"byte_end":755,"byte_start":745,"column_end":15,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"    batch_size: usize,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\result.rs:45:19: warning: struct `InternalScanResult` is never constructed\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`InternalScanResult` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","rendered":null,"spans":[]}],"code":{"code":"dead_code","explanation":null},"level":"warning","message":"struct `InternalScanResult` is never constructed","spans":[{"byte_end":1092,"byte_start":1074,"column_end":37,"column_start":19,"expansion":null,"file_name":"abop-core\\src\\scanner\\result.rs","is_primary":true,"label":null,"line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":19,"text":"pub(crate) struct InternalScanResult {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\result.rs:53:12: warning: associated items `new` and `into_summary` are never used\n","$message_type":"diagnostic","children":[],"code":{"code":"dead_code","explanation":null},"level":"warning","message":"associated items `new` and `into_summary` are never used","spans":[{"byte_end":1250,"byte_start":1227,"column_end":24,"column_start":1,"expansion":null,"file_name":"abop-core\\src\\scanner\\result.rs","is_primary":false,"label":"associated items in this implementation","line_end":52,"line_start":52,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":1,"text":"impl InternalScanResult {"}]},{"byte_end":1268,"byte_start":1265,"column_end":15,"column_start":12,"expansion":null,"file_name":"abop-core\\src\\scanner\\result.rs","is_primary":true,"label":null,"line_end":53,"line_start":53,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new() -> Self {"}]},{"byte_end":1497,"byte_start":1485,"column_end":24,"column_start":12,"expansion":null,"file_name":"abop-core\\src\\scanner\\result.rs","is_primary":true,"label":null,"line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":12,"text":"    pub fn into_summary(self, new_files: Vec<Audiobook>, updated_files: Vec<Audiobook>) -> ScanSummary {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:104:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the lint level is defined here","rendered":null,"spans":[{"byte_end":217,"byte_start":205,"column_end":21,"column_start":9,"expansion":null,"file_name":"abop-core\\src\\lib.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":9,"text":"#![warn(missing_docs)]"}]}]}],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":3151,"byte_start":3118,"column_end":38,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    pub fn to_string(&self) -> String {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:110:1: warning: missing documentation for an enum\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for an enum","spans":[{"byte_end":3239,"byte_start":3221,"column_end":19,"column_start":1,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":1,"text":"pub enum ScanError {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:112:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":3292,"byte_start":3290,"column_end":7,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":112,"line_start":112,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":7,"highlight_start":5,"text":"    Io(#[from] io::Error),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:115:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":3382,"byte_start":3369,"column_end":18,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":115,"line_start":115,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    DatabaseError(#[from] rusqlite::Error),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:118:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":3470,"byte_start":3455,"column_end":20,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":118,"line_start":118,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    ProcessingError(String),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:121:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":3542,"byte_start":3529,"column_end":18,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":121,"line_start":121,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    InvalidFormat(String),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:124:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":3621,"byte_start":3608,"column_end":18,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":124,"line_start":124,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    MetadataError(String),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:127:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":3679,"byte_start":3670,"column_end":14,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":127,"line_start":127,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"    Cancelled,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:130:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":3723,"byte_start":3717,"column_end":11,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":130,"line_start":130,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":5,"text":"    Paused,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\error.rs:133:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":3780,"byte_start":3773,"column_end":12,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":5,"text":"    Unknown(String),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\error.rs:67:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":1791,"byte_start":1677,"column_end":54,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\error.rs","is_primary":true,"label":null,"line_end":69,"line_start":67,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":5,"text":"    fn context<C>(self, context: C) -> ScanResult<T>"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":54,"highlight_start":1,"text":"        C: std::fmt::Display + Send + Sync + 'static;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\progress.rs:12:5: warning: missing documentation for a struct field\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a struct field","spans":[{"byte_end":314,"byte_start":288,"column_end":31,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\progress.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":5,"text":"    pub files_processed: usize,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\progress.rs:13:5: warning: missing documentation for a struct field\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a struct field","spans":[{"byte_end":343,"byte_start":321,"column_end":27,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\progress.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    pub total_files: usize,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\progress.rs:14:5: warning: missing documentation for a struct field\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a struct field","spans":[{"byte_end":383,"byte_start":350,"column_end":38,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\progress.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    pub current_file: Option<PathBuf>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\progress.rs:15:5: warning: missing documentation for a struct field\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a struct field","spans":[{"byte_end":416,"byte_start":390,"column_end":31,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\progress.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":5,"text":"    pub errors: Vec<ScanError>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\progress.rs:20:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":569,"byte_start":518,"column_end":56,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\progress.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":5,"text":"    fn report_progress(&self, progress: &ScanProgress);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\progress.rs:29:5: warning: missing documentation for an associated function\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for an associated function","spans":[{"byte_end":781,"byte_start":731,"column_end":55,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\progress.rs","is_primary":true,"label":null,"line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":5,"text":"    pub fn new(tx: mpsc::Sender<ScanProgress>) -> Self {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:27:1: warning: missing documentation for an enum\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for an enum","spans":[{"byte_end":837,"byte_start":816,"column_end":22,"column_start":1,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ScannerState {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:28:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":849,"byte_start":845,"column_end":9,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":9,"highlight_start":5,"text":"    Idle,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:29:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":864,"byte_start":856,"column_end":13,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":5,"text":"    Scanning,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:30:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":877,"byte_start":871,"column_end":11,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":5,"text":"    Paused,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:31:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":893,"byte_start":884,"column_end":14,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"    Completed,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:32:5: warning: missing documentation for a variant\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a variant","spans":[{"byte_end":905,"byte_start":900,"column_end":10,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":32,"line_start":32,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    Error,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:140:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":5101,"byte_start":5056,"column_end":50,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":5,"text":"    pub async fn get_state(&self) -> ScannerState {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:144:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":5200,"byte_start":5152,"column_end":53,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":144,"line_start":144,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":5,"text":"    pub async fn get_progress(&self) -> ScanProgress {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:148:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":5300,"byte_start":5261,"column_end":44,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":148,"line_start":148,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":5,"text":"    pub async fn pause(&self) -> Result<()> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:159:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":5648,"byte_start":5608,"column_end":45,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":159,"line_start":159,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":5,"text":"    pub async fn resume(&self) -> Result<()> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\library_scanner.rs:170:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":5995,"byte_start":5955,"column_end":45,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":170,"line_start":170,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":5,"text":"    pub async fn cancel(&self) -> Result<()> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\result.rs:22:5: warning: missing documentation for an associated function\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for an associated function","spans":[{"byte_end":587,"byte_start":567,"column_end":25,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\result.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":5,"text":"    pub fn new() -> Self {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"message":{"rendered":"abop-core\\src\\scanner\\result.rs:32:5: warning: missing documentation for a method\n","$message_type":"diagnostic","children":[],"code":{"code":"missing_docs","explanation":null},"level":"warning","message":"missing documentation for a method","spans":[{"byte_end":840,"byte_start":806,"column_end":39,"column_start":5,"expansion":null,"file_name":"abop-core\\src\\scanner\\result.rs","is_primary":true,"label":null,"line_end":32,"line_start":32,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":5,"text":"    pub fn total_files(&self) -> usize {"}]}]}}
{"reason":"compiler-artifact","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-core#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_core","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libabop_core-85581a7177ca6fe1.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\pshap\\coding\\abop\\target\\debug\\build\\abop-gui-a0875c88208eb4ef\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#env_logger@0.10.2","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\env_logger-0.10.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"env_logger","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\env_logger-0.10.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["auto-color","color","default","humantime","regex"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libenv_logger-2edc95ac59d859f9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rfd@0.15.3","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfd-0.15.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rfd","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfd-0.15.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ashpd","async-std","default","pollster","urlencoding","xdg-portal"],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\librfd-018b1607392f1b72.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#material-color-utilities-rs@0.2.1","manifest_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\material-color-utilities-rs-0.2.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"material_color_utilities_rs","src_path":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\material-color-utilities-rs-0.2.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\pshap\\coding\\abop\\target\\debug\\deps\\libmaterial_color_utilities_rs-cc2d4f12154980d7.rmeta"],"executable":null,"fresh":true}
    Checking abop-gui v0.1.0 (C:\Users\pshap\coding\abop\abop-gui)
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0255]: the name `ScannerState` is defined multiple times\n   --> abop-gui\\src\\state.rs:368:1\n    |\n31  | use abop_core::scanner::library_scanner::ScannerState;\n    |     ------------------------------------------------- previous import of the type `ScannerState` here\n...\n368 | pub struct ScannerState {\n    | ^^^^^^^^^^^^^^^^^^^^^^^ `ScannerState` redefined here\n    |\n    = note: `ScannerState` must be defined only once in the type namespace of this module\nhelp: you can use `as` to change the binding name of the import\n    |\n31  | use abop_core::scanner::library_scanner::ScannerState as OtherScannerState;\n    |                                                       ++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`ScannerState` must be defined only once in the type namespace of this module","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"you can use `as` to change the binding name of the import","rendered":null,"spans":[{"byte_end":927,"byte_start":927,"column_end":54,"column_start":54,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":" as OtherScannerState","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":54,"highlight_start":54,"text":"use abop_core::scanner::library_scanner::ScannerState;"}]}]}],"code":{"code":"E0255","explanation":"You can't import a value whose name is the same as another value defined in the\nmodule.\n\nErroneous code example:\n\n```compile_fail,E0255\nuse bar::foo; // error: an item named `foo` is already in scope\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse bar::foo as bar_foo; // ok!\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nOr you can reference the item with its parent:\n\n```\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {\n    bar::foo(); // we get the item by referring to its parent\n}\n```\n"},"level":"error","message":"the name `ScannerState` is defined multiple times","spans":[{"byte_end":13057,"byte_start":13034,"column_end":24,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"`ScannerState` redefined here","line_end":368,"line_start":368,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":1,"text":"pub struct ScannerState {"}]},{"byte_end":927,"byte_start":878,"column_end":54,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":"previous import of the type `ScannerState` here","line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":5,"text":"use abop_core::scanner::library_scanner::ScannerState;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0255]: the name `ViewType` is defined multiple times\n   --> abop-gui\\src\\state.rs:417:1\n    |\n18  |     ViewType,\n    |     -------- previous import of the type `ViewType` here\n...\n417 | pub enum ViewType {\n    | ^^^^^^^^^^^^^^^^^ `ViewType` redefined here\n    |\n    = note: `ViewType` must be defined only once in the type namespace of this module\nhelp: you can use `as` to change the binding name of the import\n    |\n18  |     ViewType as OtherViewType,\n    |              ++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`ViewType` must be defined only once in the type namespace of this module","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"you can use `as` to change the binding name of the import","rendered":null,"spans":[{"byte_end":528,"byte_start":528,"column_end":13,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":" as OtherViewType","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":13,"highlight_start":13,"text":"    ViewType,"}]}]}],"code":{"code":"E0255","explanation":"You can't import a value whose name is the same as another value defined in the\nmodule.\n\nErroneous code example:\n\n```compile_fail,E0255\nuse bar::foo; // error: an item named `foo` is already in scope\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse bar::foo as bar_foo; // ok!\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nOr you can reference the item with its parent:\n\n```\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {\n    bar::foo(); // we get the item by referring to its parent\n}\n```\n"},"level":"error","message":"the name `ViewType` is defined multiple times","spans":[{"byte_end":14211,"byte_start":14194,"column_end":18,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"`ViewType` redefined here","line_end":417,"line_start":417,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub enum ViewType {"}]},{"byte_end":528,"byte_start":520,"column_end":13,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":"previous import of the type `ViewType` here","line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":5,"text":"    ViewType,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0255]: the name `ScanProgress` is defined multiple times\n   --> abop-gui\\src\\library\\scanner.rs:280:1\n    |\n14  | use abop_core::scanner::progress::ScanProgress;\n    |     ------------------------------------------ previous import of the type `ScanProgress` here\n...\n280 | pub enum ScanProgress {\n    | ^^^^^^^^^^^^^^^^^^^^^ `ScanProgress` redefined here\n    |\n    = note: `ScanProgress` must be defined only once in the type namespace of this module\nhelp: you can use `as` to change the binding name of the import\n    |\n14  | use abop_core::scanner::progress::ScanProgress as OtherScanProgress;\n    |                                                ++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`ScanProgress` must be defined only once in the type namespace of this module","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"you can use `as` to change the binding name of the import","rendered":null,"spans":[{"byte_end":400,"byte_start":400,"column_end":47,"column_start":47,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":" as OtherScanProgress","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":47,"highlight_start":47,"text":"use abop_core::scanner::progress::ScanProgress;"}]}]}],"code":{"code":"E0255","explanation":"You can't import a value whose name is the same as another value defined in the\nmodule.\n\nErroneous code example:\n\n```compile_fail,E0255\nuse bar::foo; // error: an item named `foo` is already in scope\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse bar::foo as bar_foo; // ok!\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nOr you can reference the item with its parent:\n\n```\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {\n    bar::foo(); // we get the item by referring to its parent\n}\n```\n"},"level":"error","message":"the name `ScanProgress` is defined multiple times","spans":[{"byte_end":9821,"byte_start":9800,"column_end":22,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"`ScanProgress` redefined here","line_end":280,"line_start":280,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ScanProgress {"}]},{"byte_end":400,"byte_start":358,"column_end":47,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"previous import of the type `ScanProgress` here","line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":5,"text":"use abop_core::scanner::progress::ScanProgress;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `abop_core::scanner::ScannerState`\n --> abop-gui\\src\\messages.rs:7:15\n  |\n7 |     scanner::{ScannerState, ScanProgress},\n  |               ^^^^^^^^^^^^ no `ScannerState` in `scanner`\n  |\n  = help: consider importing this enum instead:\n          abop_core::scanner::library_scanner::ScannerState\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum instead:\nabop_core::scanner::library_scanner::ScannerState","rendered":null,"spans":[]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `abop_core::scanner::ScannerState`","spans":[{"byte_end":226,"byte_start":214,"column_end":27,"column_start":15,"expansion":null,"file_name":"abop-gui\\src\\messages.rs","is_primary":true,"label":"no `ScannerState` in `scanner`","line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":15,"text":"    scanner::{ScannerState, ScanProgress},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `iced::widget::table`\n --> abop-gui\\src\\state.rs:9:19\n  |\n9 | use iced::widget::table::State as TableState;\n  |                   ^^^^^ could not find `table` in `widget`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `iced::widget::table`","spans":[{"byte_end":241,"byte_start":236,"column_end":24,"column_start":19,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"could not find `table` in `widget`","line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":19,"text":"use iced::widget::table::State as TableState;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: unresolved import\n  --> abop-gui\\src\\state.rs:21:12\n   |\n21 | use crate::core::scanner::{ScannerState as CoreScannerState, LibraryScanner};\n   |            ^^^^\n   |            |\n   |            unresolved import\n   |            help: a similar path exists: `symphonia::core`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a similar path exists","rendered":null,"spans":[{"byte_end":598,"byte_start":594,"column_end":16,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":"symphonia::core","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":12,"text":"use crate::core::scanner::{ScannerState as CoreScannerState, LibraryScanner};"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: unresolved import","spans":[{"byte_end":598,"byte_start":594,"column_end":16,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unresolved import","line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"use crate::core::scanner::{ScannerState as CoreScannerState, LibraryScanner};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: unresolved import\n  --> abop-gui\\src\\state.rs:22:12\n   |\n22 | use crate::core::db::AudiobookRepository;\n   |            ^^^^\n   |            |\n   |            unresolved import\n   |            help: a similar path exists: `symphonia::core`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a similar path exists","rendered":null,"spans":[{"byte_end":677,"byte_start":673,"column_end":16,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":"symphonia::core","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":12,"text":"use crate::core::db::AudiobookRepository;"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: unresolved import","spans":[{"byte_end":677,"byte_start":673,"column_end":16,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unresolved import","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"use crate::core::db::AudiobookRepository;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `abop_core::scanner::ScannerState`\n  --> abop-gui\\src\\state.rs:19:5\n   |\n19 |     scanner::ScannerState as CoreScannerState,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ScannerState` in `scanner`\n   |\n   = help: consider importing this enum instead:\n           abop_core::scanner::library_scanner::ScannerState\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum instead:\nabop_core::scanner::library_scanner::ScannerState","rendered":null,"spans":[]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `abop_core::scanner::ScannerState`","spans":[{"byte_end":576,"byte_start":535,"column_end":46,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"no `ScannerState` in `scanner`","line_end":19,"line_start":19,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":5,"text":"    scanner::ScannerState as CoreScannerState,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `abop_core::player`\n  --> abop-gui\\src\\state.rs:30:16\n   |\n30 | use abop_core::player::PlayerState;\n   |                ^^^^^^ could not find `player` in `abop_core`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `abop_core::player`","spans":[{"byte_end":858,"byte_start":852,"column_end":22,"column_start":16,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"could not find `player` in `abop_core`","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":16,"text":"use abop_core::player::PlayerState;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved imports `crate::components::audiobook_table`, `crate::styling::layout`\n  --> abop-gui\\src\\views\\library.rs:15:9\n   |\n15 |         audiobook_table::AudiobookTable,\n   |         ^^^^^^^^^^^^^^^ could not find `audiobook_table` in `components`\n...\n19 |         layout::LayoutContainerStyles,\n   |         ^^^^^^ could not find `layout` in `styling`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved imports `crate::components::audiobook_table`, `crate::styling::layout`","spans":[{"byte_end":365,"byte_start":350,"column_end":24,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":"could not find `audiobook_table` in `components`","line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":9,"text":"        audiobook_table::AudiobookTable,"}]},{"byte_end":458,"byte_start":452,"column_end":15,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":"could not find `layout` in `styling`","line_end":19,"line_start":19,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":9,"text":"        layout::LayoutContainerStyles,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `iced_font_awesome`\n --> abop-gui\\src\\components\\icon_support.rs:8:5\n  |\n8 | use iced_font_awesome::fa_icon_solid;\n  |     ^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `iced_font_awesome`\n  |\nhelp: there is a crate or module with a similar name\n  |\n8 - use iced_font_awesome::fa_icon_solid;\n8 + use font_awesome::fa_icon_solid;\n  |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a crate or module with a similar name","rendered":null,"spans":[{"byte_end":302,"byte_start":285,"column_end":22,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\icon_support.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"font_awesome","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":22,"highlight_start":5,"text":"use iced_font_awesome::fa_icon_solid;"}]}]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `iced_font_awesome`","spans":[{"byte_end":302,"byte_start":285,"column_end":22,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\icon_support.rs","is_primary":true,"label":"use of unresolved module or unlinked crate `iced_font_awesome`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"use iced_font_awesome::fa_icon_solid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `iced_font_awesome`\n --> abop-gui\\src\\components\\icons.rs:4:5\n  |\n4 | use iced_font_awesome::fa_icon_solid;\n  |     ^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `iced_font_awesome`\n  |\nhelp: there is a crate or module with a similar name\n  |\n4 - use iced_font_awesome::fa_icon_solid;\n4 + use font_awesome::fa_icon_solid;\n  |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a crate or module with a similar name","rendered":null,"spans":[{"byte_end":102,"byte_start":85,"column_end":22,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\icons.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"font_awesome","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":22,"highlight_start":5,"text":"use iced_font_awesome::fa_icon_solid;"}]}]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `iced_font_awesome`","spans":[{"byte_end":102,"byte_start":85,"column_end":22,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\icons.rs","is_primary":true,"label":"use of unresolved module or unlinked crate `iced_font_awesome`","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"use iced_font_awesome::fa_icon_solid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `abop_core::scanner::ScannerState`\n --> abop-gui\\src\\components\\status.rs:8:15\n  |\n8 |     scanner::{ScannerState, ScanProgress},\n  |               ^^^^^^^^^^^^ no `ScannerState` in `scanner`\n  |\n  = help: consider importing this enum instead:\n          abop_core::scanner::library_scanner::ScannerState\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum instead:\nabop_core::scanner::library_scanner::ScannerState","rendered":null,"spans":[]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `abop_core::scanner::ScannerState`","spans":[{"byte_end":187,"byte_start":175,"column_end":27,"column_start":15,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":"no `ScannerState` in `scanner`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":15,"text":"    scanner::{ScannerState, ScanProgress},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved imports `crate::state::GuiState`, `crate::styling::material::components::surface`\n  --> abop-gui\\src\\views\\library.rs:10:5\n   |\n10 |     state::GuiState,\n   |     ^^^^^^^--------\n   |     |      |\n   |     |      help: a similar name exists in the module: `UiState`\n   |     no `GuiState` in `state`\n...\n20 |         material::components::surface::SurfaceVariant,\n   |                               ^^^^^^^ could not find `surface` in `components`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a similar name exists in the module","rendered":null,"spans":[{"byte_end":210,"byte_start":202,"column_end":20,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"UiState","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":20,"highlight_start":12,"text":"    state::GuiState,"}]}]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved imports `crate::state::GuiState`, `crate::styling::material::components::surface`","spans":[{"byte_end":210,"byte_start":195,"column_end":20,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":"no `GuiState` in `state`","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    state::GuiState,"}]},{"byte_end":521,"byte_start":514,"column_end":38,"column_start":31,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":"could not find `surface` in `components`","line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":31,"text":"        material::components::surface::SurfaceVariant,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `crate::styling::material::components::buttons`\n  --> abop-gui\\src\\components\\task_manager.rs:13:44\n   |\n13 | use crate::styling::material::components::{buttons, containers};\n   |                                            ^^^^^^^ no `buttons` in `styling::material::components`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `crate::styling::material::components::buttons`","spans":[{"byte_end":482,"byte_start":475,"column_end":51,"column_start":44,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":"no `buttons` in `styling::material::components`","line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":44,"text":"use crate::styling::material::components::{buttons, containers};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0432]: unresolved import `iced_font_awesome`\n --> abop-gui\\src\\styling\\material\\components\\button_style\\functions.rs:7:5\n  |\n7 | use iced_font_awesome::fa_icon_solid;\n  |     ^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `iced_font_awesome`\n  |\nhelp: there is a crate or module with a similar name\n  |\n7 - use iced_font_awesome::fa_icon_solid;\n7 + use font_awesome::fa_icon_solid;\n  |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a crate or module with a similar name","rendered":null,"spans":[{"byte_end":285,"byte_start":268,"column_end":22,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\styling\\material\\components\\button_style\\functions.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"font_awesome","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":22,"highlight_start":5,"text":"use iced_font_awesome::fa_icon_solid;"}]}]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `iced_font_awesome`","spans":[{"byte_end":285,"byte_start":268,"column_end":22,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\styling\\material\\components\\button_style\\functions.rs","is_primary":true,"label":"use of unresolved module or unlinked crate `iced_font_awesome`","line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"use iced_font_awesome::fa_icon_solid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `TaskManager`\n   --> abop-gui\\src\\handlers\\ui_state.rs:232:24\n    |\n232 |             let task = TaskManager::create_task(task_type);\n    |                        ^^^^^^^^^^^ use of undeclared type `TaskManager`\n    |\nhelp: consider importing this struct\n    |\n5   + use crate::components::task_manager::TaskManager;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this struct","rendered":null,"spans":[{"byte_end":121,"byte_start":121,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"use crate::components::task_manager::TaskManager;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use iced::Task;"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `TaskManager`","spans":[{"byte_end":10862,"byte_start":10851,"column_end":35,"column_start":24,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":"use of undeclared type `TaskManager`","line_end":232,"line_start":232,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":24,"text":"            let task = TaskManager::create_task(task_type);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0574]: expected struct, variant or union type, found enum `ScannerState`\n   --> abop-gui\\src\\state.rs:367:17\n    |\n367 | #[derive(Debug, Clone)]\n    |                 ^^^^^ not a struct, variant or union type\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0574","explanation":"Something other than a struct, variant or union has been used when one was\nexpected.\n\nErroneous code example:\n\n```compile_fail,E0574\nmod mordor {}\n\nlet sauron = mordor { x: () }; // error!\n\nenum Jak {\n    Daxter { i: isize },\n}\n\nlet eco = Jak::Daxter { i: 1 };\nmatch eco {\n    Jak { i } => {} // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error,\nwe tried to instantiate the `mordor` module, which is impossible. If you want\nto instantiate a type inside a module, you can do it as follow:\n\n```\nmod mordor {\n    pub struct TheRing {\n        pub x: usize,\n    }\n}\n\nlet sauron = mordor::TheRing { x: 1 }; // ok!\n```\n\nIn the second error, we tried to bind the `Jak` enum directly, which is not\npossible: you can only bind one of its variants. To do so:\n\n```\nenum Jak {\n    Daxter { i: isize },\n}\n\nlet eco = Jak::Daxter { i: 1 };\nmatch eco {\n    Jak::Daxter { i } => {} // ok!\n}\n```\n"},"level":"error","message":"expected struct, variant or union type, found enum `ScannerState`","spans":[{"byte_end":13030,"byte_start":13025,"column_end":22,"column_start":17,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":13030,"byte_start":13025,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":null,"line_end":367,"line_start":367,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"not a struct, variant or union type","line_end":367,"line_start":367,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0422]: cannot find struct, variant or union type `EnhancedStatusDisplayParams` in this scope\n   --> abop-gui\\src\\views\\library.rs:132:9\n    |\n132 |         EnhancedStatusDisplayParams {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n3   + use crate::components::status::EnhancedStatusDisplayParams;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this struct","rendered":null,"spans":[{"byte_end":27,"byte_start":27,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::components::status::EnhancedStatusDisplayParams;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use iced::{"}]}]}],"code":{"code":"E0422","explanation":"An identifier that is neither defined nor a struct was used.\n\nErroneous code example:\n\n```compile_fail,E0422\nfn main () {\n    let x = Foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `Foo` is undefined, so it inherently isn't anything, and\ndefinitely not a struct.\n\n```compile_fail\nfn main () {\n    let foo = 1;\n    let x = foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `foo` is defined, but is not a struct, so Rust can't use it as\none.\n"},"level":"error","message":"cannot find struct, variant or union type `EnhancedStatusDisplayParams` in this scope","spans":[{"byte_end":4310,"byte_start":4283,"column_end":36,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":"not found in this scope","line_end":132,"line_start":132,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":9,"text":"        EnhancedStatusDisplayParams {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0424]: expected value, found module `self`\n   --> abop-gui\\src\\views\\library.rs:213:9\n    |\n124 | pub fn library_view(state: &GuiState) -> iced::Element<Message> {\n    |        ------------ this function can't have a `self` parameter\n...\n213 |         self.scanner_progress.view().map(Message::Scanner),\n    |         ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0424","explanation":"The `self` keyword was used inside of an associated function without a \"`self`\nreceiver\" parameter.\n\nErroneous code example:\n\n```compile_fail,E0424\nstruct Foo;\n\nimpl Foo {\n    // `bar` is a method, because it has a receiver parameter.\n    fn bar(&self) {}\n\n    // `foo` is not a method, because it has no receiver parameter.\n    fn foo() {\n        self.bar(); // error: `self` value is a keyword only available in\n                    //        methods with a `self` parameter\n    }\n}\n```\n\nThe `self` keyword can only be used inside methods, which are associated\nfunctions (functions defined inside of a `trait` or `impl` block) that have a\n`self` receiver as its first parameter, like `self`, `&self`, `&mut self` or\n`self: &mut Pin<Self>` (this last one is an example of an [\"arbitrary `self`\ntype\"](https://github.com/rust-lang/rust/issues/44874)).\n\nCheck if the associated function's parameter list should have contained a `self`\nreceiver for it to be a method, and add it if so. Example:\n\n```\nstruct Foo;\n\nimpl Foo {\n    fn bar(&self) {}\n\n    fn foo(self) { // `foo` is now a method.\n        self.bar(); // ok!\n    }\n}\n```\n"},"level":"error","message":"expected value, found module `self`","spans":[{"byte_end":7436,"byte_start":7432,"column_end":13,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":"`self` value is a keyword only available in methods with a `self` parameter","line_end":213,"line_start":213,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":9,"text":"        self.scanner_progress.view().map(Message::Scanner),"}]},{"byte_end":3975,"byte_start":3963,"column_end":20,"column_start":8,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":false,"label":"this function can't have a `self` parameter","line_end":124,"line_start":124,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"pub fn library_view(state: &GuiState) -> iced::Element<Message> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `AudiobookRepository`\n  --> abop-gui\\src\\library\\scanner.rs:54:35\n   |\n54 |         let repository = Arc::new(AudiobookRepository::new(db));\n   |                                   ^^^^^^^^^^^^^^^^^^^ use of undeclared type `AudiobookRepository`\n   |\nhelp: consider importing this struct\n   |\n3  + use abop_core::db::repositories::AudiobookRepository;\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this struct","rendered":null,"spans":[{"byte_end":38,"byte_start":38,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use abop_core::db::repositories::AudiobookRepository;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use abop_core::{"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `AudiobookRepository`","spans":[{"byte_end":1750,"byte_start":1731,"column_end":54,"column_start":35,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"use of undeclared type `AudiobookRepository`","line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":35,"text":"        let repository = Arc::new(AudiobookRepository::new(db));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `ScannerState` in module `abop_core::scanner`\n   --> abop-gui\\src\\library\\scanner.rs:197:32\n    |\n197 |     state: abop_core::scanner::ScannerState,\n    |                                ^^^^^^^^^^^^ not found in `abop_core::scanner`\n    |\nhelp: consider importing this enum\n    |\n3   + use abop_core::scanner::library_scanner::ScannerState;\n    |\nhelp: if you import `ScannerState`, refer to it directly\n    |\n197 -     state: abop_core::scanner::ScannerState,\n197 +     state: ScannerState,\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum","rendered":null,"spans":[{"byte_end":38,"byte_start":38,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use abop_core::scanner::library_scanner::ScannerState;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use abop_core::{"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ScannerState`, refer to it directly","rendered":null,"spans":[{"byte_end":7317,"byte_start":7297,"column_end":32,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":197,"line_start":197,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":32,"highlight_start":12,"text":"    state: abop_core::scanner::ScannerState,"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `ScannerState` in module `abop_core::scanner`","spans":[{"byte_end":7329,"byte_start":7317,"column_end":44,"column_start":32,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"not found in `abop_core::scanner`","line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":32,"text":"    state: abop_core::scanner::ScannerState,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `ScannerState` in `scanner`\n   --> abop-gui\\src\\library\\scanner.rs:204:40\n    |\n204 |             state: abop_core::scanner::ScannerState::Idle,\n    |                                        ^^^^^^^^^^^^ could not find `ScannerState` in `scanner`\n    |\nhelp: consider importing this enum\n    |\n3   + use abop_core::scanner::library_scanner::ScannerState;\n    |\nhelp: if you import `ScannerState`, refer to it directly\n    |\n204 -             state: abop_core::scanner::ScannerState::Idle,\n204 +             state: ScannerState::Idle,\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum","rendered":null,"spans":[{"byte_end":38,"byte_start":38,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use abop_core::scanner::library_scanner::ScannerState;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use abop_core::{"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ScannerState`, refer to it directly","rendered":null,"spans":[{"byte_end":7485,"byte_start":7465,"column_end":40,"column_start":20,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":204,"line_start":204,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":40,"highlight_start":20,"text":"            state: abop_core::scanner::ScannerState::Idle,"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `ScannerState` in `scanner`","spans":[{"byte_end":7497,"byte_start":7485,"column_end":52,"column_start":40,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"could not find `ScannerState` in `scanner`","line_end":204,"line_start":204,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":40,"text":"            state: abop_core::scanner::ScannerState::Idle,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `ScannerState` in `scanner`\n   --> abop-gui\\src\\library\\scanner.rs:216:33\n    |\n216 |             abop_core::scanner::ScannerState::Idle => column![].into(),\n    |                                 ^^^^^^^^^^^^ could not find `ScannerState` in `scanner`\n    |\nhelp: consider importing this enum\n    |\n3   + use abop_core::scanner::library_scanner::ScannerState;\n    |\nhelp: if you import `ScannerState`, refer to it directly\n    |\n216 -             abop_core::scanner::ScannerState::Idle => column![].into(),\n216 +             ScannerState::Idle => column![].into(),\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum","rendered":null,"spans":[{"byte_end":38,"byte_start":38,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use abop_core::scanner::library_scanner::ScannerState;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use abop_core::{"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ScannerState`, refer to it directly","rendered":null,"spans":[{"byte_end":7721,"byte_start":7701,"column_end":33,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":33,"highlight_start":13,"text":"            abop_core::scanner::ScannerState::Idle => column![].into(),"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `ScannerState` in `scanner`","spans":[{"byte_end":7733,"byte_start":7721,"column_end":45,"column_start":33,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"could not find `ScannerState` in `scanner`","line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":33,"text":"            abop_core::scanner::ScannerState::Idle => column![].into(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `ScannerState` in module `abop_core::scanner`\n   --> abop-gui\\src\\library\\scanner.rs:254:60\n    |\n254 |     pub fn set_state(&mut self, state: abop_core::scanner::ScannerState) {\n    |                                                            ^^^^^^^^^^^^ not found in `abop_core::scanner`\n    |\nhelp: consider importing this enum\n    |\n3   + use abop_core::scanner::library_scanner::ScannerState;\n    |\nhelp: if you import `ScannerState`, refer to it directly\n    |\n254 -     pub fn set_state(&mut self, state: abop_core::scanner::ScannerState) {\n254 +     pub fn set_state(&mut self, state: ScannerState) {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this enum","rendered":null,"spans":[{"byte_end":38,"byte_start":38,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use abop_core::scanner::library_scanner::ScannerState;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use abop_core::{"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ScannerState`, refer to it directly","rendered":null,"spans":[{"byte_end":9188,"byte_start":9168,"column_end":60,"column_start":40,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":254,"line_start":254,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":60,"highlight_start":40,"text":"    pub fn set_state(&mut self, state: abop_core::scanner::ScannerState) {"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `ScannerState` in module `abop_core::scanner`","spans":[{"byte_end":9200,"byte_start":9188,"column_end":72,"column_start":60,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"not found in `abop_core::scanner`","line_end":254,"line_start":254,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":72,"highlight_start":60,"text":"    pub fn set_state(&mut self, state: abop_core::scanner::ScannerState) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `AudiobookRepository` in this scope\n   --> abop-gui\\src\\library\\scanner.rs:260:13\n    |\n260 |     db: Arc<AudiobookRepository>,\n    |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n3   + use abop_core::db::repositories::AudiobookRepository;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this struct","rendered":null,"spans":[{"byte_end":38,"byte_start":38,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use abop_core::db::repositories::AudiobookRepository;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use abop_core::{"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `AudiobookRepository` in this scope","spans":[{"byte_end":9303,"byte_start":9284,"column_end":32,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"not found in this scope","line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":13,"text":"    db: Arc<AudiobookRepository>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `AudiobookRepository` in this scope\n   --> abop-gui\\src\\library\\scanner.rs:270:13\n    |\n270 |     db: Arc<AudiobookRepository>,\n    |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this struct\n    |\n3   + use abop_core::db::repositories::AudiobookRepository;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this struct","rendered":null,"spans":[{"byte_end":38,"byte_start":38,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use abop_core::db::repositories::AudiobookRepository;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use abop_core::{"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `AudiobookRepository` in this scope","spans":[{"byte_end":9578,"byte_start":9559,"column_end":32,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"not found in this scope","line_end":270,"line_start":270,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":13,"text":"    db: Arc<AudiobookRepository>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of unresolved module or unlinked crate `containers`\n   --> abop-gui\\src\\components\\status.rs:183:28\n    |\n183 |             .style(|theme| containers::container_style(theme, *theme_mode))\n    |                            ^^^^^^^^^^ use of unresolved module or unlinked crate `containers`\n    |\n    = help: if you wanted to use a crate named `containers`, use `cargo add containers` to add it to your `Cargo.toml`\nhelp: consider importing this module through its public re-export\n    |\n1   + use crate::styling::material::containers;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if you wanted to use a crate named `containers`, use `cargo add containers` to add it to your `Cargo.toml`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider importing this module through its public re-export","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use crate::styling::material::containers;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use iced::Element;"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of unresolved module or unlinked crate `containers`","spans":[{"byte_end":7176,"byte_start":7166,"column_end":38,"column_start":28,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":"use of unresolved module or unlinked crate `containers`","line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":28,"text":"            .style(|theme| containers::container_style(theme, *theme_mode))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n  --> abop-gui\\src\\commands\\library.rs:25:12\n   |\n25 |         if let Some(ext) = entry.path().extension()\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":785,"byte_start":745,"column_end":52,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":12,"text":"        if let Some(ext) = entry.path().extension()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n  --> abop-gui\\src\\handlers\\ui_state.rs:60:24\n   |\n60 |                     if let Some(first_selected_id) = state.selected_audiobooks.iter().next()\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":2637,"byte_start":2568,"column_end":93,"column_start":24,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":93,"highlight_start":24,"text":"                    if let Some(first_selected_id) = state.selected_audiobooks.iter().next()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n  --> abop-gui\\src\\handlers\\ui_state.rs:61:28\n   |\n61 |                           && let Some(audiobook) = state\n   |  ____________________________^\n62 | |                             .audiobooks\n63 | |                             .iter()\n64 | |                             .find(|ab| &ab.id == first_selected_id)\n   | |___________________________________________________________________^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":2840,"byte_start":2666,"column_end":68,"column_start":28,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":64,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":28,"text":"                        && let Some(audiobook) = state"},{"highlight_end":40,"highlight_start":1,"text":"                            .audiobooks"},{"highlight_end":36,"highlight_start":1,"text":"                            .iter()"},{"highlight_end":68,"highlight_start":1,"text":"                            .find(|ab| &ab.id == first_selected_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\handlers\\ui_state.rs:118:20\n    |\n118 |                 if let Some(first_selected_id) = state.selected_audiobooks.iter().next()\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":5573,"byte_start":5504,"column_end":89,"column_start":20,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":118,"line_start":118,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":89,"highlight_start":20,"text":"                if let Some(first_selected_id) = state.selected_audiobooks.iter().next()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\handlers\\ui_state.rs:119:24\n    |\n119 |                       && let Some(audiobook) = state\n    |  ________________________^\n120 | |                         .audiobooks\n121 | |                         .iter()\n122 | |                         .find(|ab| &ab.id == first_selected_id)\n    | |_______________________________________________________________^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":5760,"byte_start":5598,"column_end":64,"column_start":24,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":122,"line_start":119,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":24,"text":"                    && let Some(audiobook) = state"},{"highlight_end":36,"highlight_start":1,"text":"                        .audiobooks"},{"highlight_end":32,"highlight_start":1,"text":"                        .iter()"},{"highlight_end":64,"highlight_start":1,"text":"                        .find(|ab| &ab.id == first_selected_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\handlers\\ui_state.rs:173:20\n    |\n173 |                 if let Some(first_selected_id) = state.selected_audiobooks.iter().next()\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":8387,"byte_start":8318,"column_end":89,"column_start":20,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":89,"highlight_start":20,"text":"                if let Some(first_selected_id) = state.selected_audiobooks.iter().next()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\handlers\\ui_state.rs:174:24\n    |\n174 |                       && let Some(audiobook) = state\n    |  ________________________^\n175 | |                         .audiobooks\n176 | |                         .iter()\n177 | |                         .find(|ab| &ab.id == first_selected_id)\n    | |_______________________________________________________________^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":8574,"byte_start":8412,"column_end":64,"column_start":24,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":177,"line_start":174,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":24,"text":"                    && let Some(audiobook) = state"},{"highlight_end":36,"highlight_start":1,"text":"                        .audiobooks"},{"highlight_end":32,"highlight_start":1,"text":"                        .iter()"},{"highlight_end":64,"highlight_start":1,"text":"                        .find(|ab| &ab.id == first_selected_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\styling\\material\\components\\feedback\\notification.rs:452:16\n    |\n452 |             && let Some(dismiss_msg) = on_dismiss\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":15462,"byte_start":15428,"column_end":50,"column_start":16,"expansion":null,"file_name":"abop-gui\\src\\styling\\material\\components\\feedback\\notification.rs","is_primary":true,"label":null,"line_end":452,"line_start":452,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":16,"text":"            && let Some(dismiss_msg) = on_dismiss"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n  --> abop-gui\\src\\styling\\material\\components\\menu_item_style.rs:68:8\n   |\n68 |     if let Some(message) = on_press\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":2654,"byte_start":2626,"column_end":36,"column_start":8,"expansion":null,"file_name":"abop-gui\\src\\styling\\material\\components\\menu_item_style.rs","is_primary":true,"label":null,"line_end":68,"line_start":68,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":8,"text":"    if let Some(message) = on_press"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\styling\\material\\components\\menus\\autocomplete.rs:193:12\n    |\n193 |         if let Some(selected) = self.selected_index\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":6560,"byte_start":6520,"column_end":52,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\styling\\material\\components\\menus\\autocomplete.rs","is_primary":true,"label":null,"line_end":193,"line_start":193,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":12,"text":"        if let Some(selected) = self.selected_index"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\styling\\material\\components\\widgets\\material_button.rs:461:16\n    |\n461 |             && let Some(content_layout) = layout.children().next()\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":16368,"byte_start":16317,"column_end":67,"column_start":16,"expansion":null,"file_name":"abop-gui\\src\\styling\\material\\components\\widgets\\material_button.rs","is_primary":true,"label":null,"line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":16,"text":"            && let Some(content_layout) = layout.children().next()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\styling\\material\\elevation\\context.rs:124:12\n    |\n124 |         if let Ok(cache) = self.cache.lock()\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":3994,"byte_start":3961,"column_end":45,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\styling\\material\\elevation\\context.rs","is_primary":true,"label":null,"line_end":124,"line_start":124,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":12,"text":"        if let Ok(cache) = self.cache.lock()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\styling\\material\\elevation\\context.rs:125:16\n    |\n125 |             && let Some(style) = cache.get(&cache_key)\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":4050,"byte_start":4011,"column_end":55,"column_start":16,"expansion":null,"file_name":"abop-gui\\src\\styling\\material\\elevation\\context.rs","is_primary":true,"label":null,"line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":16,"text":"            && let Some(style) = cache.get(&cache_key)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\styling\\plugins.rs:317:16\n    |\n317 |             if let Some(override_def) = overrides.get(context)\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":9593,"byte_start":9546,"column_end":63,"column_start":16,"expansion":null,"file_name":"abop-gui\\src\\styling\\plugins.rs","is_primary":true,"label":null,"line_end":317,"line_start":317,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":16,"text":"            if let Some(override_def) = overrides.get(context)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0658]: `let` expressions in this position are unstable\n   --> abop-gui\\src\\styling\\plugins.rs:318:20\n    |\n318 |                 && let Some(style) = override_def.component_styles.get(component)\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-05-31; consider upgrading it if it is out of date\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `#![feature(let_chains)]` to the crate attributes to enable","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"this compiler was built on 2025-05-31; consider upgrading it if it is out of date","rendered":null,"spans":[]}],"code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n```compile_fail,E0658\nuse std::intrinsics; // error: use of unstable library feature `core_intrinsics`\n```\n\nIf you're using a stable or a beta version of rustc, you won't be able to use\nany unstable features. In order to do so, please switch to a nightly version of\nrustc (by using [rustup]).\n\nIf you're using a nightly version of rustc, just add the corresponding feature\nto be able to use it:\n\n```\n#![feature(core_intrinsics)]\n\nuse std::intrinsics; // ok!\n```\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","message":"`let` expressions in this position are unstable","spans":[{"byte_end":9676,"byte_start":9614,"column_end":82,"column_start":20,"expansion":null,"file_name":"abop-gui\\src\\styling\\plugins.rs","is_primary":true,"label":null,"line_end":318,"line_start":318,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":20,"text":"                && let Some(style) = override_def.component_styles.get(component)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `iced::widget::button`\n --> abop-gui\\src\\messages.rs:5:5\n  |\n5 | use iced::widget::button;\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":182,"byte_start":155,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\messages.rs","is_primary":true,"label":null,"line_end":6,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":1,"text":"use iced::widget::button;"},{"highlight_end":1,"highlight_start":1,"text":"use abop_core::{"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `iced::widget::button`","spans":[{"byte_end":179,"byte_start":159,"column_end":25,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\messages.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":5,"text":"use iced::widget::button;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `error::AppError` and `scanner::progress::ScanProgress`\n  --> abop-gui\\src\\commands\\library.rs:13:5\n   |\n13 |     error::AppError,\n   |     ^^^^^^^^^^^^^^^\n14 |     scanner::progress::ScanProgress,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":378,"byte_start":318,"column_end":36,"column_start":20,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":14,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":20,"text":"    models::Library,"},{"highlight_end":21,"highlight_start":1,"text":"    error::AppError,"},{"highlight_end":36,"highlight_start":1,"text":"    scanner::progress::ScanProgress,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `error::AppError` and `scanner::progress::ScanProgress`","spans":[{"byte_end":340,"byte_start":325,"column_end":20,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    error::AppError,"}]},{"byte_end":378,"byte_start":347,"column_end":36,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":5,"text":"    scanner::progress::ScanProgress,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `abop_core::scanner::progress::ScanProgress`\n  --> abop-gui\\src\\handlers\\data_updates.rs:14:5\n   |\n14 | use abop_core::scanner::progress::ScanProgress;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":391,"byte_start":342,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":null,"line_end":15,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":48,"highlight_start":1,"text":"use abop_core::scanner::progress::ScanProgress;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `abop_core::scanner::progress::ScanProgress`","spans":[{"byte_end":388,"byte_start":346,"column_end":47,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":5,"text":"use abop_core::scanner::progress::ScanProgress;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `abop_core::models::Audiobook`\n --> abop-gui\\src\\handlers\\ui_state.rs:9:5\n  |\n9 | use abop_core::models::Audiobook;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":265,"byte_start":230,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":34,"highlight_start":1,"text":"use abop_core::models::Audiobook;"},{"highlight_end":1,"highlight_start":1,"text":"use abop_core::scanner::progress::ScanProgress;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `abop_core::models::Audiobook`","spans":[{"byte_end":262,"byte_start":234,"column_end":33,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":5,"text":"use abop_core::models::Audiobook;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `iced::widget::Column`\n --> abop-gui\\src\\state.rs:8:5\n  |\n8 | use iced::widget::Column;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":218,"byte_start":191,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":1,"text":"use iced::widget::Column;"},{"highlight_end":1,"highlight_start":1,"text":"use iced::widget::table::State as TableState;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `iced::widget::Column`","spans":[{"byte_end":215,"byte_start":195,"column_end":25,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":5,"text":"use iced::widget::Column;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `AppData as CoreAppData`, `AppState as CoreAppState`, and `UserPreferences as CoreUserPreferences`\n  --> abop-gui\\src\\state.rs:15:5\n   |\n15 |     AppState as CoreAppState,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n16 |     UserPreferences as CoreUserPreferences,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 |     AppData as CoreAppData,\n   |     ^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":520,"byte_start":415,"column_end":5,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":18,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":5,"text":"    AppState as CoreAppState,"},{"highlight_end":44,"highlight_start":1,"text":"    UserPreferences as CoreUserPreferences,"},{"highlight_end":28,"highlight_start":1,"text":"    AppData as CoreAppData,"},{"highlight_end":5,"highlight_start":1,"text":"    ViewType,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `AppData as CoreAppData`, `AppState as CoreAppState`, and `UserPreferences as CoreUserPreferences`","spans":[{"byte_end":439,"byte_start":415,"column_end":29,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"    AppState as CoreAppState,"}]},{"byte_end":484,"byte_start":446,"column_end":43,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":5,"text":"    UserPreferences as CoreUserPreferences,"}]},{"byte_end":513,"byte_start":491,"column_end":27,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    AppData as CoreAppData,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `library::scanner::ScannerProgress` and `messages::Message`\n  --> abop-gui\\src\\state.rs:25:5\n   |\n25 |     messages::Message,\n   |     ^^^^^^^^^^^^^^^^^\n26 |     library::scanner::ScannerProgress,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":789,"byte_start":707,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":28,"line_start":24,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":1,"text":"use crate::{"},{"highlight_end":23,"highlight_start":1,"text":"    messages::Message,"},{"highlight_end":39,"highlight_start":1,"text":"    library::scanner::ScannerProgress,"},{"highlight_end":3,"highlight_start":1,"text":"};"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `library::scanner::ScannerProgress` and `messages::Message`","spans":[{"byte_end":742,"byte_start":725,"column_end":22,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"    messages::Message,"}]},{"byte_end":782,"byte_start":749,"column_end":38,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    library::scanner::ScannerProgress,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Alignment`, `button`, `progress_bar`, `row`, and `text`\n --> abop-gui\\src\\views\\library.rs:4:14\n  |\n4 |     widget::{button, column, container, progress_bar, row, text},\n  |              ^^^^^^                     ^^^^^^^^^^^^  ^^^  ^^^^\n5 |     Alignment, Element, Length, Theme,\n  |     ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":61,"byte_start":53,"column_end":22,"column_start":14,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":22,"highlight_start":14,"text":"    widget::{button, column, container, progress_bar, row, text},"}]},{"byte_end":103,"byte_start":78,"column_end":64,"column_start":39,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":64,"highlight_start":39,"text":"    widget::{button, column, container, progress_bar, row, text},"}]},{"byte_end":120,"byte_start":104,"column_end":14,"column_start":65,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":66,"highlight_start":65,"text":"    widget::{button, column, container, progress_bar, row, text},"},{"highlight_end":14,"highlight_start":1,"text":"    Alignment, Element, Length, Theme,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Alignment`, `button`, `progress_bar`, `row`, and `text`","spans":[{"byte_end":59,"byte_start":53,"column_end":20,"column_start":14,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":14,"text":"    widget::{button, column, container, progress_bar, row, text},"}]},{"byte_end":92,"byte_start":80,"column_end":53,"column_start":41,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":41,"text":"    widget::{button, column, container, progress_bar, row, text},"}]},{"byte_end":97,"byte_start":94,"column_end":58,"column_start":55,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":55,"text":"    widget::{button, column, container, progress_bar, row, text},"}]},{"byte_end":103,"byte_start":99,"column_end":64,"column_start":60,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":60,"text":"    widget::{button, column, container, progress_bar, row, text},"}]},{"byte_end":120,"byte_start":111,"column_end":14,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"    Alignment, Element, Length, Theme,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `iced::widget::container::Style`\n  --> abop-gui\\src\\views\\mod.rs:10:5\n   |\n10 | use iced::widget::container::Style;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":271,"byte_start":234,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":11,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":1,"text":"use iced::widget::container::Style;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `iced::widget::container::Style`","spans":[{"byte_end":268,"byte_start":238,"column_end":35,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":5,"text":"use iced::widget::container::Style;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DatabaseConfig`\n --> abop-gui\\src\\library\\scanner.rs:4:20\n  |\n4 |     db::{Database, DatabaseConfig}, \n  |                    ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":89,"byte_start":73,"column_end":34,"column_start":18,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":34,"highlight_start":18,"text":"    db::{Database, DatabaseConfig}, "}]},{"byte_end":65,"byte_start":64,"column_end":10,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":9,"text":"    db::{Database, DatabaseConfig}, "}]},{"byte_end":90,"byte_start":89,"column_end":35,"column_start":34,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":34,"text":"    db::{Database, DatabaseConfig}, "}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DatabaseConfig`","spans":[{"byte_end":89,"byte_start":75,"column_end":34,"column_start":20,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":20,"text":"    db::{Database, DatabaseConfig}, "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `button`, `container`, and `row`\n  --> abop-gui\\src\\library\\scanner.rs:15:20\n   |\n15 | use iced::widget::{button, column, container, progress_bar, row, text};\n   |                    ^^^^^^          ^^^^^^^^^                ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":430,"byte_start":422,"column_end":28,"column_start":20,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":20,"text":"use iced::widget::{button, column, container, progress_bar, row, text};"}]},{"byte_end":447,"byte_start":436,"column_end":45,"column_start":34,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":34,"text":"use iced::widget::{button, column, container, progress_bar, row, text};"}]},{"byte_end":466,"byte_start":461,"column_end":64,"column_start":59,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":64,"highlight_start":59,"text":"use iced::widget::{button, column, container, progress_bar, row, text};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `button`, `container`, and `row`","spans":[{"byte_end":428,"byte_start":422,"column_end":26,"column_start":20,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":20,"text":"use iced::widget::{button, column, container, progress_bar, row, text};"}]},{"byte_end":447,"byte_start":438,"column_end":45,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":36,"text":"use iced::widget::{button, column, container, progress_bar, row, text};"}]},{"byte_end":466,"byte_start":463,"column_end":64,"column_start":61,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":61,"text":"use iced::widget::{button, column, container, progress_bar, row, text};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Alignment`, `Length`, and `Theme`\n  --> abop-gui\\src\\library\\scanner.rs:16:12\n   |\n16 | use iced::{Alignment, Element, Length, Theme};\n   |            ^^^^^^^^^           ^^^^^^  ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":498,"byte_start":487,"column_end":23,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":12,"text":"use iced::{Alignment, Element, Length, Theme};"}]},{"byte_end":520,"byte_start":505,"column_end":45,"column_start":30,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":30,"text":"use iced::{Alignment, Element, Length, Theme};"}]},{"byte_end":487,"byte_start":486,"column_end":12,"column_start":11,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":12,"highlight_start":11,"text":"use iced::{Alignment, Element, Length, Theme};"}]},{"byte_end":521,"byte_start":520,"column_end":46,"column_start":45,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":46,"highlight_start":45,"text":"use iced::{Alignment, Element, Length, Theme};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Alignment`, `Length`, and `Theme`","spans":[{"byte_end":496,"byte_start":487,"column_end":21,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"use iced::{Alignment, Element, Length, Theme};"}]},{"byte_end":513,"byte_start":507,"column_end":38,"column_start":32,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":32,"text":"use iced::{Alignment, Element, Length, Theme};"}]},{"byte_end":520,"byte_start":515,"column_end":45,"column_start":40,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":40,"text":"use iced::{Alignment, Element, Length, Theme};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `button` and `row`\n --> abop-gui\\src\\components\\status.rs:3:45\n  |\n3 | use iced::widget::{column, container, text, row, button};\n  |                                             ^^^  ^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":94,"byte_start":81,"column_end":56,"column_start":43,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":56,"highlight_start":43,"text":"use iced::widget::{column, container, text, row, button};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `button` and `row`","spans":[{"byte_end":86,"byte_start":83,"column_end":48,"column_start":45,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":45,"text":"use iced::widget::{column, container, text, row, button};"}]},{"byte_end":94,"byte_start":88,"column_end":56,"column_start":50,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":50,"text":"use iced::widget::{column, container, text, row, button};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `container`\n --> abop-gui\\src\\components\\task_manager.rs:3:36\n  |\n3 | use iced::widget::{button, column, container, progress_bar, row, text};\n  |                                    ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":105,"byte_start":94,"column_end":45,"column_start":34,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":34,"text":"use iced::widget::{button, column, container, progress_bar, row, text};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `container`","spans":[{"byte_end":105,"byte_start":96,"column_end":45,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":36,"text":"use iced::widget::{button, column, container, progress_bar, row, text};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Alignment` and `Theme`\n --> abop-gui\\src\\components\\task_manager.rs:4:12\n  |\n4 | use iced::{Alignment, Element, Length, Theme};\n  |            ^^^^^^^^^                   ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":156,"byte_start":145,"column_end":23,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":12,"text":"use iced::{Alignment, Element, Length, Theme};"}]},{"byte_end":178,"byte_start":171,"column_end":45,"column_start":38,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":38,"text":"use iced::{Alignment, Element, Length, Theme};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Alignment` and `Theme`","spans":[{"byte_end":154,"byte_start":145,"column_end":21,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"use iced::{Alignment, Element, Length, Theme};"}]},{"byte_end":178,"byte_start":173,"column_end":45,"column_start":40,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":40,"text":"use iced::{Alignment, Element, Length, Theme};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `iced::widget::container::Style`\n --> abop-gui\\src\\components\\task_manager.rs:5:5\n  |\n5 | use iced::widget::container::Style;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":219,"byte_start":182,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":6,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":1,"text":"use iced::widget::container::Style;"},{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `iced::widget::container::Style`","spans":[{"byte_end":216,"byte_start":186,"column_end":35,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":5,"text":"use iced::widget::container::Style;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::design_tokens::spacing`\n --> abop-gui\\src\\components\\task_manager.rs:8:5\n  |\n8 | use crate::design_tokens::spacing;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":274,"byte_start":238,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":1,"text":"use crate::design_tokens::spacing;"},{"highlight_end":1,"highlight_start":1,"text":"use crate::messages::Message;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::design_tokens::spacing`","spans":[{"byte_end":271,"byte_start":242,"column_end":34,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"use crate::design_tokens::spacing;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::styling::material::MaterialTokens`\n  --> abop-gui\\src\\components\\task_manager.rs:11:5\n   |\n11 | use crate::styling::material::MaterialTokens;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":402,"byte_start":355,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":12,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":46,"highlight_start":1,"text":"use crate::styling::material::MaterialTokens;"},{"highlight_end":1,"highlight_start":1,"text":"use crate::theme::ThemeMode;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::styling::material::MaterialTokens`","spans":[{"byte_end":399,"byte_start":359,"column_end":45,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":5,"text":"use crate::styling::material::MaterialTokens;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::theme::ThemeMode`\n  --> abop-gui\\src\\components\\task_manager.rs:12:5\n   |\n12 | use crate::theme::ThemeMode;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":432,"byte_start":402,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":13,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use crate::theme::ThemeMode;"},{"highlight_end":1,"highlight_start":1,"text":"use crate::styling::material::components::{buttons, containers};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::theme::ThemeMode`","spans":[{"byte_end":429,"byte_start":406,"column_end":28,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"use crate::theme::ThemeMode;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::styling::material::components::widgets::material_button`\n  --> abop-gui\\src\\components\\task_manager.rs:14:5\n   |\n14 | use crate::styling::material::components::widgets::material_button;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":567,"byte_start":498,"column_end":1,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":15,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":68,"highlight_start":1,"text":"use crate::styling::material::components::widgets::material_button;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::styling::material::components::widgets::material_button`","spans":[{"byte_end":564,"byte_start":502,"column_end":67,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":5,"text":"use crate::styling::material::components::widgets::material_button;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> abop-gui\\src\\state.rs:374:1\n    |\n374 | impl Default for ScannerState {\n    | ^^^^^^^^^^^^^^^^^------------\n    |                  |\n    |                  `abop_core::scanner::library_scanner::ScannerState` is not defined in the current crate\n    |\n    = note: impl doesn't have any local type before any uncovered type parameters\n    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules\n    = note: define and implement a trait or new type instead\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"impl doesn't have any local type before any uncovered type parameters","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"define and implement a trait or new type instead","rendered":null,"spans":[]}],"code":{"code":"E0117","explanation":"Only traits defined in the current crate can be implemented for arbitrary types.\n\nErroneous code example:\n\n```compile_fail,E0117\nimpl Drop for u32 {}\n```\n\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule prohibits any implementation of a foreign trait (a\ntrait defined in another crate) where\n\n - the type that is implementing the trait is foreign\n - all of the parameters being passed to the trait (if there are any) are also\n   foreign.\n\nTo avoid this kind of error, ensure that at least one local type is referenced\nby the `impl`:\n\n```\npub struct Foo; // you define your type in your crate\n\nimpl Drop for Foo { // and you can implement the trait on it!\n    // code of trait implementation here\n#   fn drop(&mut self) { }\n}\n\nimpl From<Foo> for i32 { // or you use a type from your crate as\n                         // a type parameter\n    fn from(i: Foo) -> i32 {\n        0\n    }\n}\n```\n\nAlternatively, define a trait locally and implement that instead:\n\n```\ntrait Bar {\n    fn get(&self) -> usize;\n}\n\nimpl Bar for u32 {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nFor information on the design of the orphan rules, see [RFC 1023].\n\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n"},"level":"error","message":"only traits defined in the current crate can be implemented for types defined outside of the crate","spans":[{"byte_end":13224,"byte_start":13212,"column_end":30,"column_start":18,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":"`abop_core::scanner::library_scanner::ScannerState` is not defined in the current crate","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":18,"text":"impl Default for ScannerState {"}]},{"byte_end":13224,"byte_start":13195,"column_end":30,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":1,"text":"impl Default for ScannerState {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> abop-gui\\src\\state.rs:367:10\n    |\n367 | #[derive(Debug, Clone)]\n    |          ^^^^^ `abop_core::scanner::library_scanner::ScannerState` is not defined in the current crate\n    |\n    = note: impl doesn't have any local type before any uncovered type parameters\n    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules\n    = note: define and implement a trait or new type instead\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"impl doesn't have any local type before any uncovered type parameters","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"define and implement a trait or new type instead","rendered":null,"spans":[]}],"code":{"code":"E0117","explanation":"Only traits defined in the current crate can be implemented for arbitrary types.\n\nErroneous code example:\n\n```compile_fail,E0117\nimpl Drop for u32 {}\n```\n\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule prohibits any implementation of a foreign trait (a\ntrait defined in another crate) where\n\n - the type that is implementing the trait is foreign\n - all of the parameters being passed to the trait (if there are any) are also\n   foreign.\n\nTo avoid this kind of error, ensure that at least one local type is referenced\nby the `impl`:\n\n```\npub struct Foo; // you define your type in your crate\n\nimpl Drop for Foo { // and you can implement the trait on it!\n    // code of trait implementation here\n#   fn drop(&mut self) { }\n}\n\nimpl From<Foo> for i32 { // or you use a type from your crate as\n                         // a type parameter\n    fn from(i: Foo) -> i32 {\n        0\n    }\n}\n```\n\nAlternatively, define a trait locally and implement that instead:\n\n```\ntrait Bar {\n    fn get(&self) -> usize;\n}\n\nimpl Bar for u32 {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nFor information on the design of the orphan rules, see [RFC 1023].\n\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n"},"level":"error","message":"only traits defined in the current crate can be implemented for types defined outside of the crate","spans":[{"byte_end":13023,"byte_start":13018,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":13023,"byte_start":13018,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":null,"line_end":367,"line_start":367,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"`abop_core::scanner::library_scanner::ScannerState` is not defined in the current crate","line_end":367,"line_start":367,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> abop-gui\\src\\state.rs:416:10\n    |\n416 | #[derive(Debug, Clone)]\n    |          ^^^^^ `abop_core::ViewType` is not defined in the current crate\n    |\n    = note: impl doesn't have any local type before any uncovered type parameters\n    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules\n    = note: define and implement a trait or new type instead\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"impl doesn't have any local type before any uncovered type parameters","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"define and implement a trait or new type instead","rendered":null,"spans":[]}],"code":{"code":"E0117","explanation":"Only traits defined in the current crate can be implemented for arbitrary types.\n\nErroneous code example:\n\n```compile_fail,E0117\nimpl Drop for u32 {}\n```\n\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule prohibits any implementation of a foreign trait (a\ntrait defined in another crate) where\n\n - the type that is implementing the trait is foreign\n - all of the parameters being passed to the trait (if there are any) are also\n   foreign.\n\nTo avoid this kind of error, ensure that at least one local type is referenced\nby the `impl`:\n\n```\npub struct Foo; // you define your type in your crate\n\nimpl Drop for Foo { // and you can implement the trait on it!\n    // code of trait implementation here\n#   fn drop(&mut self) { }\n}\n\nimpl From<Foo> for i32 { // or you use a type from your crate as\n                         // a type parameter\n    fn from(i: Foo) -> i32 {\n        0\n    }\n}\n```\n\nAlternatively, define a trait locally and implement that instead:\n\n```\ntrait Bar {\n    fn get(&self) -> usize;\n}\n\nimpl Bar for u32 {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nFor information on the design of the orphan rules, see [RFC 1023].\n\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n"},"level":"error","message":"only traits defined in the current crate can be implemented for types defined outside of the crate","spans":[{"byte_end":14183,"byte_start":14178,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":14183,"byte_start":14178,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":null,"line_end":416,"line_start":416,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"`abop_core::ViewType` is not defined in the current crate","line_end":416,"line_start":416,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> abop-gui\\src\\library\\scanner.rs:279:10\n    |\n279 | #[derive(Debug, Clone)]\n    |          ^^^^^ `abop_core::scanner::ScanProgress` is not defined in the current crate\n    |\n    = note: impl doesn't have any local type before any uncovered type parameters\n    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules\n    = note: define and implement a trait or new type instead\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"impl doesn't have any local type before any uncovered type parameters","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"define and implement a trait or new type instead","rendered":null,"spans":[]}],"code":{"code":"E0117","explanation":"Only traits defined in the current crate can be implemented for arbitrary types.\n\nErroneous code example:\n\n```compile_fail,E0117\nimpl Drop for u32 {}\n```\n\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule prohibits any implementation of a foreign trait (a\ntrait defined in another crate) where\n\n - the type that is implementing the trait is foreign\n - all of the parameters being passed to the trait (if there are any) are also\n   foreign.\n\nTo avoid this kind of error, ensure that at least one local type is referenced\nby the `impl`:\n\n```\npub struct Foo; // you define your type in your crate\n\nimpl Drop for Foo { // and you can implement the trait on it!\n    // code of trait implementation here\n#   fn drop(&mut self) { }\n}\n\nimpl From<Foo> for i32 { // or you use a type from your crate as\n                         // a type parameter\n    fn from(i: Foo) -> i32 {\n        0\n    }\n}\n```\n\nAlternatively, define a trait locally and implement that instead:\n\n```\ntrait Bar {\n    fn get(&self) -> usize;\n}\n\nimpl Bar for u32 {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nFor information on the design of the orphan rules, see [RFC 1023].\n\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n"},"level":"error","message":"only traits defined in the current crate can be implemented for types defined outside of the crate","spans":[{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"`abop_core::scanner::ScanProgress` is not defined in the current crate","line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> abop-gui\\src\\state.rs:367:17\n    |\n367 | #[derive(Debug, Clone)]\n    |                 ^^^^^ `abop_core::scanner::library_scanner::ScannerState` is not defined in the current crate\n    |\n    = note: impl doesn't have any local type before any uncovered type parameters\n    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules\n    = note: define and implement a trait or new type instead\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"impl doesn't have any local type before any uncovered type parameters","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"define and implement a trait or new type instead","rendered":null,"spans":[]}],"code":{"code":"E0117","explanation":"Only traits defined in the current crate can be implemented for arbitrary types.\n\nErroneous code example:\n\n```compile_fail,E0117\nimpl Drop for u32 {}\n```\n\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule prohibits any implementation of a foreign trait (a\ntrait defined in another crate) where\n\n - the type that is implementing the trait is foreign\n - all of the parameters being passed to the trait (if there are any) are also\n   foreign.\n\nTo avoid this kind of error, ensure that at least one local type is referenced\nby the `impl`:\n\n```\npub struct Foo; // you define your type in your crate\n\nimpl Drop for Foo { // and you can implement the trait on it!\n    // code of trait implementation here\n#   fn drop(&mut self) { }\n}\n\nimpl From<Foo> for i32 { // or you use a type from your crate as\n                         // a type parameter\n    fn from(i: Foo) -> i32 {\n        0\n    }\n}\n```\n\nAlternatively, define a trait locally and implement that instead:\n\n```\ntrait Bar {\n    fn get(&self) -> usize;\n}\n\nimpl Bar for u32 {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nFor information on the design of the orphan rules, see [RFC 1023].\n\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n"},"level":"error","message":"only traits defined in the current crate can be implemented for types defined outside of the crate","spans":[{"byte_end":13030,"byte_start":13025,"column_end":22,"column_start":17,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":13030,"byte_start":13025,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":null,"line_end":367,"line_start":367,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"`abop_core::scanner::library_scanner::ScannerState` is not defined in the current crate","line_end":367,"line_start":367,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> abop-gui\\src\\state.rs:416:17\n    |\n416 | #[derive(Debug, Clone)]\n    |                 ^^^^^ `abop_core::ViewType` is not defined in the current crate\n    |\n    = note: impl doesn't have any local type before any uncovered type parameters\n    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules\n    = note: define and implement a trait or new type instead\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"impl doesn't have any local type before any uncovered type parameters","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"define and implement a trait or new type instead","rendered":null,"spans":[]}],"code":{"code":"E0117","explanation":"Only traits defined in the current crate can be implemented for arbitrary types.\n\nErroneous code example:\n\n```compile_fail,E0117\nimpl Drop for u32 {}\n```\n\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule prohibits any implementation of a foreign trait (a\ntrait defined in another crate) where\n\n - the type that is implementing the trait is foreign\n - all of the parameters being passed to the trait (if there are any) are also\n   foreign.\n\nTo avoid this kind of error, ensure that at least one local type is referenced\nby the `impl`:\n\n```\npub struct Foo; // you define your type in your crate\n\nimpl Drop for Foo { // and you can implement the trait on it!\n    // code of trait implementation here\n#   fn drop(&mut self) { }\n}\n\nimpl From<Foo> for i32 { // or you use a type from your crate as\n                         // a type parameter\n    fn from(i: Foo) -> i32 {\n        0\n    }\n}\n```\n\nAlternatively, define a trait locally and implement that instead:\n\n```\ntrait Bar {\n    fn get(&self) -> usize;\n}\n\nimpl Bar for u32 {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nFor information on the design of the orphan rules, see [RFC 1023].\n\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n"},"level":"error","message":"only traits defined in the current crate can be implemented for types defined outside of the crate","spans":[{"byte_end":14190,"byte_start":14185,"column_end":22,"column_start":17,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":14190,"byte_start":14185,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":null,"line_end":416,"line_start":416,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"`abop_core::ViewType` is not defined in the current crate","line_end":416,"line_start":416,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> abop-gui\\src\\library\\scanner.rs:279:17\n    |\n279 | #[derive(Debug, Clone)]\n    |                 ^^^^^ `abop_core::scanner::ScanProgress` is not defined in the current crate\n    |\n    = note: impl doesn't have any local type before any uncovered type parameters\n    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules\n    = note: define and implement a trait or new type instead\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"impl doesn't have any local type before any uncovered type parameters","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"define and implement a trait or new type instead","rendered":null,"spans":[]}],"code":{"code":"E0117","explanation":"Only traits defined in the current crate can be implemented for arbitrary types.\n\nErroneous code example:\n\n```compile_fail,E0117\nimpl Drop for u32 {}\n```\n\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule prohibits any implementation of a foreign trait (a\ntrait defined in another crate) where\n\n - the type that is implementing the trait is foreign\n - all of the parameters being passed to the trait (if there are any) are also\n   foreign.\n\nTo avoid this kind of error, ensure that at least one local type is referenced\nby the `impl`:\n\n```\npub struct Foo; // you define your type in your crate\n\nimpl Drop for Foo { // and you can implement the trait on it!\n    // code of trait implementation here\n#   fn drop(&mut self) { }\n}\n\nimpl From<Foo> for i32 { // or you use a type from your crate as\n                         // a type parameter\n    fn from(i: Foo) -> i32 {\n        0\n    }\n}\n```\n\nAlternatively, define a trait locally and implement that instead:\n\n```\ntrait Bar {\n    fn get(&self) -> usize;\n}\n\nimpl Bar for u32 {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nFor information on the design of the orphan rules, see [RFC 1023].\n\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n"},"level":"error","message":"only traits defined in the current crate can be implemented for types defined outside of the crate","spans":[{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"`abop_core::scanner::ScanProgress` is not defined in the current crate","line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> abop-gui\\src\\library\\scanner.rs:303:1\n    |\n303 | impl ScanProgress {\n    | ^^^^^^^^^^^^^^^^^ impl for type defined outside of crate\n    |\n    = note: define and implement a trait or new type instead\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"define and implement a trait or new type instead","rendered":null,"spans":[]}],"code":{"code":"E0116","explanation":"An inherent implementation was defined for a type outside the current crate.\n\nErroneous code example:\n\n```compile_fail,E0116\nimpl Vec<u8> { } // error\n```\n\nYou can only define an inherent implementation for a type in the same crate\nwhere the type was defined. For example, an `impl` block as above is not allowed\nsince `Vec` is defined in the standard library.\n\nTo fix this problem, you can either:\n\n - define a trait that has the desired associated functions/types/constants and\n   implement the trait for the type in question\n - define a new type wrapping the type and define an implementation on the new\n   type\n\nNote that using the `type` keyword does not work here because `type` only\nintroduces a type alias:\n\n```compile_fail,E0116\ntype Bytes = Vec<u8>;\n\nimpl Bytes { } // error, same as above\n```\n"},"level":"error","message":"cannot define inherent `impl` for a type outside of the crate where the type is defined","spans":[{"byte_end":10321,"byte_start":10304,"column_end":18,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"impl for type defined outside of crate","line_end":303,"line_start":303,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"impl ScanProgress {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied\n   --> abop-gui\\src\\library\\scanner.rs:70:11\n    |\n70  | ) -> Task<Result<ScanResult, AppError>> {\n    |           ^^^^^^           ---------- help: remove the unnecessary generic argument\n    |           |\n    |           expected 1 generic argument\n    |\nnote: type alias defined here, with 1 generic parameter: `T`\n   --> C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\error.rs:101:10\n    |\n101 | pub type Result<T> = std::result::Result<T, AppError>;\n    |          ^^^^^^ -\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type alias defined here, with 1 generic parameter: `T`","rendered":null,"spans":[{"byte_end":3056,"byte_start":3055,"column_end":18,"column_start":17,"expansion":null,"file_name":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\error.rs","is_primary":false,"label":"","line_end":101,"line_start":101,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":17,"text":"pub type Result<T> = std::result::Result<T, AppError>;"}]},{"byte_end":3054,"byte_start":3048,"column_end":16,"column_start":10,"expansion":null,"file_name":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\error.rs","is_primary":true,"label":null,"line_end":101,"line_start":101,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":10,"text":"pub type Result<T> = std::result::Result<T, AppError>;"}]}]},{"children":[],"code":null,"level":"help","message":"remove the unnecessary generic argument","rendered":null,"spans":[{"byte_end":2180,"byte_start":2170,"column_end":38,"column_start":28,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":70,"line_start":70,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":38,"highlight_start":28,"text":") -> Task<Result<ScanResult, AppError>> {"}]}]}],"code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","message":"type alias takes 1 generic argument but 2 generic arguments were supplied","spans":[{"byte_end":2159,"byte_start":2153,"column_end":17,"column_start":11,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"expected 1 generic argument","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":11,"text":") -> Task<Result<ScanResult, AppError>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no function or associated item named `spawn` found for struct `iced::Task` in the current scope\n  --> abop-gui\\src\\library\\scanner.rs:53:11\n   |\n53 |     Task::spawn(async move {\n   |           ^^^^^ function or associated item not found in `iced::Task<_>`\n   |\nnote: if you're trying to build a new `iced::Task<_>` consider using one of the following associated functions:\n      iced::Task::<T>::none\n      iced::Task::<T>::done\n      iced::Task::<T>::perform\n      iced::Task::<T>::run\n      and 3 others\n  --> C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_runtime-0.13.2\\src\\task.rs:22:5\n   |\n22 |       pub fn none() -> Self {\n   |       ^^^^^^^^^^^^^^^^^^^^^\n...\n27 | /     pub fn done(value: T) -> Self\n28 | |     where\n29 | |         T: MaybeSend + 'static,\n   | |_______________________________^\n...\n36 | /     pub fn perform<A>(\n37 | |         future: impl Future<Output = A> + MaybeSend + 'static,\n38 | |         f: impl Fn(A) -> T + MaybeSend + 'static,\n39 | |     ) -> Self\n40 | |     where\n41 | |         T: MaybeSend + 'static,\n42 | |         A: MaybeSend + 'static,\n   | |_______________________________^\n...\n49 | /     pub fn run<A>(\n50 | |         stream: impl Stream<Item = A> + MaybeSend + 'static,\n51 | |         f: impl Fn(A) -> T + MaybeSend + 'static,\n52 | |     ) -> Self\n53 | |     where\n54 | |         T: 'static,\n   | |___________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `iced::Task<_>` consider using one of the following associated functions:\niced::Task::<T>::none\niced::Task::<T>::done\niced::Task::<T>::perform\niced::Task::<T>::run\nand 3 others","rendered":null,"spans":[{"byte_end":839,"byte_start":818,"column_end":26,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_runtime-0.13.2\\src\\task.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":5,"text":"    pub fn none() -> Self {"}]},{"byte_end":1015,"byte_start":944,"column_end":32,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_runtime-0.13.2\\src\\task.rs","is_primary":true,"label":null,"line_end":29,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"    pub fn done(value: T) -> Self"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":32,"highlight_start":1,"text":"        T: MaybeSend + 'static,"}]},{"byte_end":1419,"byte_start":1200,"column_end":32,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_runtime-0.13.2\\src\\task.rs","is_primary":true,"label":null,"line_end":42,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":5,"text":"    pub fn perform<A>("},{"highlight_end":63,"highlight_start":1,"text":"        future: impl Future<Output = A> + MaybeSend + 'static,"},{"highlight_end":50,"highlight_start":1,"text":"        f: impl Fn(A) -> T + MaybeSend + 'static,"},{"highlight_end":14,"highlight_start":1,"text":"    ) -> Self"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":32,"highlight_start":1,"text":"        T: MaybeSend + 'static,"},{"highlight_end":32,"highlight_start":1,"text":"        A: MaybeSend + 'static,"}]},{"byte_end":1765,"byte_start":1596,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_runtime-0.13.2\\src\\task.rs","is_primary":true,"label":null,"line_end":54,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    pub fn run<A>("},{"highlight_end":61,"highlight_start":1,"text":"        stream: impl Stream<Item = A> + MaybeSend + 'static,"},{"highlight_end":50,"highlight_start":1,"text":"        f: impl Fn(A) -> T + MaybeSend + 'static,"},{"highlight_end":14,"highlight_start":1,"text":"    ) -> Self"},{"highlight_end":10,"highlight_start":1,"text":"    where"},{"highlight_end":20,"highlight_start":1,"text":"        T: 'static,"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no function or associated item named `spawn` found for struct `iced::Task` in the current scope","spans":[{"byte_end":1682,"byte_start":1677,"column_end":16,"column_start":11,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"function or associated item not found in `iced::Task<_>`","line_end":53,"line_start":53,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    Task::spawn(async move {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `scan_async` found for struct `LibraryScanner` in the current scope\n  --> abop-gui\\src\\library\\scanner.rs:61:30\n   |\n61 |         let result = scanner.scan_async(progress_tx).await?;\n   |                              ^^^^^^^^^^ method not found in `LibraryScanner`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `scan_async` found for struct `LibraryScanner` in the current scope","spans":[{"byte_end":1956,"byte_start":1946,"column_end":40,"column_start":30,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"method not found in `LibraryScanner`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":30,"text":"        let result = scanner.scan_async(progress_tx).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n   --> abop-gui\\src\\library\\scanner.rs:154:19\n    |\n154 |     let scanner = LibraryScanner::new(db, library);\n    |                   ^^^^^^^^^^^^^^^^^^^-------------\n    |                                      |    |\n    |                                      |    expected `usize`, found `Library`\n    |                                      argument #3 of type `usize` is missing\n    |\nnote: expected `Arc<AudiobookRepository>`, found `Database`\n   --> abop-gui\\src\\library\\scanner.rs:154:39\n    |\n154 |     let scanner = LibraryScanner::new(db, library);\n    |                                       ^^\n    = note: expected struct `std::sync::Arc<AudiobookRepository>`\n               found struct `abop_core::db::Database`\nnote: associated function defined here\n   --> C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\scanner\\library_scanner.rs:37:12\n    |\n37  |     pub fn new(repository: Arc<AudiobookRepository>, max_workers: usize, batch_size: usize) -> Self {\n    |            ^^^\nhelp: provide the argument\n    |\n154 -     let scanner = LibraryScanner::new(db, library);\n154 +     let scanner = LibraryScanner::new(/* std::sync::Arc<AudiobookRepository> */, /* usize */, /* usize */);\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected `Arc<AudiobookRepository>`, found `Database`","rendered":null,"spans":[{"byte_end":5751,"byte_start":5749,"column_end":41,"column_start":39,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":154,"line_start":154,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":39,"text":"    let scanner = LibraryScanner::new(db, library);"}]}]},{"children":[],"code":null,"level":"note","message":"expected struct `std::sync::Arc<AudiobookRepository>`\n   found struct `abop_core::db::Database`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":1008,"byte_start":1005,"column_end":15,"column_start":12,"expansion":null,"file_name":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new(repository: Arc<AudiobookRepository>, max_workers: usize, batch_size: usize) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":5761,"byte_start":5748,"column_end":51,"column_start":38,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":154,"line_start":154,"suggested_replacement":"(/* std::sync::Arc<AudiobookRepository> */, /* usize */, /* usize */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":51,"highlight_start":38,"text":"    let scanner = LibraryScanner::new(db, library);"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 3 arguments but 2 arguments were supplied","spans":[{"byte_end":5760,"byte_start":5753,"column_end":50,"column_start":43,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"expected `usize`, found `Library`","line_end":154,"line_start":154,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":43,"text":"    let scanner = LibraryScanner::new(db, library);"}]},{"byte_end":5761,"byte_start":5748,"column_end":51,"column_start":38,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"argument #3 of type `usize` is missing","line_end":154,"line_start":154,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":38,"text":"    let scanner = LibraryScanner::new(db, library);"}]},{"byte_end":5748,"byte_start":5729,"column_end":38,"column_start":19,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":154,"line_start":154,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":19,"text":"    let scanner = LibraryScanner::new(db, library);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `scan_async` found for struct `LibraryScanner` in the current scope\n   --> abop-gui\\src\\library\\scanner.rs:159:17\n    |\n159 |         scanner.scan_async(progress_tx).await\n    |                 ^^^^^^^^^^ method not found in `LibraryScanner`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `scan_async` found for struct `LibraryScanner` in the current scope","spans":[{"byte_end":5951,"byte_start":5941,"column_end":27,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"method not found in `LibraryScanner`","line_end":159,"line_start":159,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":17,"text":"        scanner.scan_async(progress_tx).await"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:168:13\n    |\n168 |             CoreScanProgress::Started { total_files } => {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n168 -             CoreScanProgress::Started { total_files } => {\n168 +             <abop_core::scanner::ScanProgress as Example>::Started { total_files } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":6220,"byte_start":6202,"column_end":31,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":168,"line_start":168,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":13,"text":"            CoreScanProgress::Started { total_files } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":6227,"byte_start":6202,"column_end":38,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":168,"line_start":168,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":13,"text":"            CoreScanProgress::Started { total_files } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:171:13\n    |\n171 |             CoreScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n171 -             CoreScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {\n171 +             <abop_core::scanner::ScanProgress as Example>::FileProcessed { current, total, file_name, progress_percentage } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":6336,"byte_start":6318,"column_end":31,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":171,"line_start":171,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":13,"text":"            CoreScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":6349,"byte_start":6318,"column_end":44,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":13,"text":"            CoreScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:174:13\n    |\n174 |             CoreScanProgress::BatchCommitted { count, total_processed } => {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n174 -             CoreScanProgress::BatchCommitted { count, total_processed } => {\n174 +             <abop_core::scanner::ScanProgress as Example>::BatchCommitted { count, total_processed } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":6509,"byte_start":6491,"column_end":31,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":174,"line_start":174,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":13,"text":"            CoreScanProgress::BatchCommitted { count, total_processed } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":6523,"byte_start":6491,"column_end":45,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":174,"line_start":174,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":13,"text":"            CoreScanProgress::BatchCommitted { count, total_processed } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:177:13\n    |\n177 |             CoreScanProgress::Complete { processed, errors, duration } => {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n177 -             CoreScanProgress::Complete { processed, errors, duration } => {\n177 +             <abop_core::scanner::ScanProgress as Example>::Complete { processed, errors, duration } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":6666,"byte_start":6648,"column_end":31,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":177,"line_start":177,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":13,"text":"            CoreScanProgress::Complete { processed, errors, duration } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":6674,"byte_start":6648,"column_end":39,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            CoreScanProgress::Complete { processed, errors, duration } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:181:13\n    |\n181 |             CoreScanProgress::Cancelled { processed, duration } => {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n181 -             CoreScanProgress::Cancelled { processed, duration } => {\n181 +             <abop_core::scanner::ScanProgress as Example>::Cancelled { processed, duration } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":6823,"byte_start":6805,"column_end":31,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":181,"line_start":181,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":13,"text":"            CoreScanProgress::Cancelled { processed, duration } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":6832,"byte_start":6805,"column_end":40,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":181,"line_start":181,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":13,"text":"            CoreScanProgress::Cancelled { processed, duration } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `abop_core::models::Library` has no field named `created_at`\n  --> abop-gui\\src\\commands\\library.rs:87:17\n   |\n87 |                 created_at: chrono::Utc::now(),\n   |                 ^^^^^^^^^^ `abop_core::models::Library` does not have this field\n   |\n   = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `abop_core::models::Library` has no field named `created_at`","spans":[{"byte_end":2927,"byte_start":2917,"column_end":27,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":"`abop_core::models::Library` does not have this field","line_end":87,"line_start":87,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":17,"text":"                created_at: chrono::Utc::now(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `abop_core::models::Library` has no field named `updated_at`\n  --> abop-gui\\src\\commands\\library.rs:88:17\n   |\n88 |                 updated_at: chrono::Utc::now(),\n   |                 ^^^^^^^^^^ `abop_core::models::Library` does not have this field\n   |\n   = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `abop_core::models::Library` has no field named `updated_at`","spans":[{"byte_end":2976,"byte_start":2966,"column_end":27,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":"`abop_core::models::Library` does not have this field","line_end":88,"line_start":88,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":17,"text":"                updated_at: chrono::Utc::now(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n   --> abop-gui\\src\\commands\\library.rs:100:27\n    |\n100 |             let scanner = abop_core::scanner::LibraryScanner::new(db, library);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------\n    |                                                                  |    |\n    |                                                                  |    expected `usize`, found `Library`\n    |                                                                  argument #3 of type `usize` is missing\n    |\nnote: expected `Arc<AudiobookRepository>`, found `Database`\n   --> abop-gui\\src\\commands\\library.rs:100:67\n    |\n100 |             let scanner = abop_core::scanner::LibraryScanner::new(db, library);\n    |                                                                   ^^\n    = note: expected struct `std::sync::Arc<AudiobookRepository>`\n               found struct `abop_core::db::Database`\nnote: associated function defined here\n   --> C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\scanner\\library_scanner.rs:37:12\n    |\n37  |     pub fn new(repository: Arc<AudiobookRepository>, max_workers: usize, batch_size: usize) -> Self {\n    |            ^^^\nhelp: provide the argument\n    |\n100 -             let scanner = abop_core::scanner::LibraryScanner::new(db, library);\n100 +             let scanner = abop_core::scanner::LibraryScanner::new(/* std::sync::Arc<AudiobookRepository> */, /* usize */, /* usize */);\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected `Arc<AudiobookRepository>`, found `Database`","rendered":null,"spans":[{"byte_end":3442,"byte_start":3440,"column_end":69,"column_start":67,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":100,"line_start":100,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":67,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]}]},{"children":[],"code":null,"level":"note","message":"expected struct `std::sync::Arc<AudiobookRepository>`\n   found struct `abop_core::db::Database`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":1008,"byte_start":1005,"column_end":15,"column_start":12,"expansion":null,"file_name":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new(repository: Arc<AudiobookRepository>, max_workers: usize, batch_size: usize) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":3452,"byte_start":3439,"column_end":79,"column_start":66,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":100,"line_start":100,"suggested_replacement":"(/* std::sync::Arc<AudiobookRepository> */, /* usize */, /* usize */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":79,"highlight_start":66,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 3 arguments but 2 arguments were supplied","spans":[{"byte_end":3451,"byte_start":3444,"column_end":78,"column_start":71,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":false,"label":"expected `usize`, found `Library`","line_end":100,"line_start":100,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":71,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]},{"byte_end":3452,"byte_start":3439,"column_end":79,"column_start":66,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":false,"label":"argument #3 of type `usize` is missing","line_end":100,"line_start":100,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":79,"highlight_start":66,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]},{"byte_end":3439,"byte_start":3400,"column_end":66,"column_start":27,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":100,"line_start":100,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":27,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `scan_async` found for struct `LibraryScanner` in the current scope\n   --> abop-gui\\src\\commands\\library.rs:106:47\n    |\n106 |                     let scan_result = scanner.scan_async(tx).await?;\n    |                                               ^^^^^^^^^^ method not found in `LibraryScanner`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `scan_async` found for struct `LibraryScanner` in the current scope","spans":[{"byte_end":3736,"byte_start":3726,"column_end":57,"column_start":47,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":"method not found in `LibraryScanner`","line_end":106,"line_start":106,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":47,"text":"                    let scan_result = scanner.scan_async(tx).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n   --> abop-gui\\src\\commands\\library.rs:140:27\n    |\n140 |             let scanner = abop_core::scanner::LibraryScanner::new(db, library);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------\n    |                                                                  |    |\n    |                                                                  |    expected `usize`, found `Library`\n    |                                                                  argument #3 of type `usize` is missing\n    |\nnote: expected `Arc<AudiobookRepository>`, found `Database`\n   --> abop-gui\\src\\commands\\library.rs:140:67\n    |\n140 |             let scanner = abop_core::scanner::LibraryScanner::new(db, library);\n    |                                                                   ^^\n    = note: expected struct `std::sync::Arc<AudiobookRepository>`\n               found struct `abop_core::db::Database`\nnote: associated function defined here\n   --> C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\scanner\\library_scanner.rs:37:12\n    |\n37  |     pub fn new(repository: Arc<AudiobookRepository>, max_workers: usize, batch_size: usize) -> Self {\n    |            ^^^\nhelp: provide the argument\n    |\n140 -             let scanner = abop_core::scanner::LibraryScanner::new(db, library);\n140 +             let scanner = abop_core::scanner::LibraryScanner::new(/* std::sync::Arc<AudiobookRepository> */, /* usize */, /* usize */);\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected `Arc<AudiobookRepository>`, found `Database`","rendered":null,"spans":[{"byte_end":4930,"byte_start":4928,"column_end":69,"column_start":67,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":67,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]}]},{"children":[],"code":null,"level":"note","message":"expected struct `std::sync::Arc<AudiobookRepository>`\n   found struct `abop_core::db::Database`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":1008,"byte_start":1005,"column_end":15,"column_start":12,"expansion":null,"file_name":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new(repository: Arc<AudiobookRepository>, max_workers: usize, batch_size: usize) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":4940,"byte_start":4927,"column_end":79,"column_start":66,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":140,"line_start":140,"suggested_replacement":"(/* std::sync::Arc<AudiobookRepository> */, /* usize */, /* usize */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":79,"highlight_start":66,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 3 arguments but 2 arguments were supplied","spans":[{"byte_end":4939,"byte_start":4932,"column_end":78,"column_start":71,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":false,"label":"expected `usize`, found `Library`","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":71,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]},{"byte_end":4940,"byte_start":4927,"column_end":79,"column_start":66,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":false,"label":"argument #3 of type `usize` is missing","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":79,"highlight_start":66,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]},{"byte_end":4927,"byte_start":4888,"column_end":66,"column_start":27,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":null,"line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":27,"text":"            let scanner = abop_core::scanner::LibraryScanner::new(db, library);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `scan_async` found for struct `LibraryScanner` in the current scope\n   --> abop-gui\\src\\commands\\library.rs:142:34\n    |\n142 |             let result = scanner.scan_async(tx).await?;\n    |                                  ^^^^^^^^^^ method not found in `LibraryScanner`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `scan_async` found for struct `LibraryScanner` in the current scope","spans":[{"byte_end":5048,"byte_start":5038,"column_end":44,"column_start":34,"expansion":null,"file_name":"abop-gui\\src\\commands\\library.rs","is_primary":true,"label":"method not found in `LibraryScanner`","line_end":142,"line_start":142,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":34,"text":"            let result = scanner.scan_async(tx).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ScanProgressEnhanced` found for enum `messages::Message` in the current scope\n   --> abop-gui\\src\\handlers\\data_updates.rs:291:18\n    |\n291 |         Message::ScanProgressEnhanced(enhanced_progress) => {\n    |                  ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `messages::Message`\n    |\n   ::: abop-gui\\src\\messages.rs:23:1\n    |\n23  | pub enum Message {\n    | ---------------- variant or associated item `ScanProgressEnhanced` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ScanProgressEnhanced` found for enum `messages::Message` in the current scope","spans":[{"byte_end":13756,"byte_start":13736,"column_end":38,"column_start":18,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"variant or associated item not found in `messages::Message`","line_end":291,"line_start":291,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":18,"text":"        Message::ScanProgressEnhanced(enhanced_progress) => {"}]},{"byte_end":725,"byte_start":709,"column_end":17,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\messages.rs","is_primary":false,"label":"variant or associated item `ScanProgressEnhanced` not found for this enum","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":1,"text":"pub enum Message {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `user_preferences` on type `state::AppState`\n  --> abop-gui\\src\\handlers\\data_updates.rs:28:26\n   |\n28 |                         .user_preferences\n   |                          ^^^^^^^^^^^^^^^^ unknown field\n   |\nhelp: one of the expressions' fields has a field of the same name\n   |\n28 |                         .core_state.user_preferences\n   |                          +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":946,"byte_start":946,"column_end":26,"column_start":26,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":26,"highlight_start":26,"text":"                        .user_preferences"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `user_preferences` on type `state::AppState`","spans":[{"byte_end":962,"byte_start":946,"column_end":42,"column_start":26,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":26,"text":"                        .user_preferences"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `data` on type `state::AppState`\n  --> abop-gui\\src\\handlers\\data_updates.rs:35:36\n   |\n35 |                         core_state.data.audiobooks.len()\n   |                                    ^^^^ unknown field\n   |\nhelp: one of the expressions' fields has a field of the same name\n   |\n35 |                         core_state.core_state.data.audiobooks.len()\n   |                                    +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":1354,"byte_start":1354,"column_end":36,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":null,"line_end":35,"line_start":35,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":36,"highlight_start":36,"text":"                        core_state.data.audiobooks.len()"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `data` on type `state::AppState`","spans":[{"byte_end":1358,"byte_start":1354,"column_end":40,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":36,"text":"                        core_state.data.audiobooks.len()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `save_blocking_with_progress` found for struct `state::AppState` in the current scope\n   --> abop-gui\\src\\handlers\\data_updates.rs:56:44\n    |\n56  | ...                   core_state.save_blocking_with_progress(Some(tx))\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `state::AppState`\n    |\n   ::: abop-gui\\src\\state.rs:385:1\n    |\n385 | pub struct AppState {\n    | ------------------- method `save_blocking_with_progress` not found for this struct\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `save_blocking_with_progress` found for struct `state::AppState` in the current scope","spans":[{"byte_end":2313,"byte_start":2286,"column_end":71,"column_start":44,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"method not found in `state::AppState`","line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":44,"text":"                                core_state.save_blocking_with_progress(Some(tx))"}]},{"byte_end":13440,"byte_start":13421,"column_end":20,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":"method `save_blocking_with_progress` not found for this struct","line_end":385,"line_start":385,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"pub struct AppState {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `audiobooks` on type `&Vec<Audiobook>`\n   --> abop-gui\\src\\handlers\\data_updates.rs:134:43\n    |\n134 |                 result.as_ref().map(|r| r.audiobooks.len()).unwrap_or(0)\n    |                                           ^^^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `audiobooks` on type `&Vec<Audiobook>`","spans":[{"byte_end":6272,"byte_start":6262,"column_end":53,"column_start":43,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":134,"line_start":134,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":43,"text":"                result.as_ref().map(|r| r.audiobooks.len()).unwrap_or(0)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `audiobooks` on type `Vec<Audiobook>`\n   --> abop-gui\\src\\handlers\\data_updates.rs:142:37\n    |\n142 |                         scan_result.audiobooks.len(),\n    |                                     ^^^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `audiobooks` on type `Vec<Audiobook>`","spans":[{"byte_end":6613,"byte_start":6603,"column_end":47,"column_start":37,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":142,"line_start":142,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":37,"text":"                        scan_result.audiobooks.len(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `scan_duration` on type `Vec<Audiobook>`\n   --> abop-gui\\src\\handlers\\data_updates.rs:143:37\n    |\n143 |                         scan_result.scan_duration\n    |                                     ^^^^^^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `scan_duration` on type `Vec<Audiobook>`","spans":[{"byte_end":6671,"byte_start":6658,"column_end":50,"column_start":37,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":37,"text":"                        scan_result.scan_duration"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `user_preferences` on type `state::AppState`\n   --> abop-gui\\src\\handlers\\data_updates.rs:149:26\n    |\n149 |                         .user_preferences\n    |                          ^^^^^^^^^^^^^^^^ unknown field\n    |\nhelp: one of the expressions' fields has a field of the same name\n    |\n149 |                         .core_state.user_preferences\n    |                          +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":6873,"byte_start":6873,"column_end":26,"column_start":26,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":null,"line_end":149,"line_start":149,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":26,"highlight_start":26,"text":"                        .user_preferences"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `user_preferences` on type `state::AppState`","spans":[{"byte_end":6889,"byte_start":6873,"column_end":42,"column_start":26,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":149,"line_start":149,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":26,"text":"                        .user_preferences"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `audiobooks` on type `Vec<Audiobook>`\n   --> abop-gui\\src\\handlers\\data_updates.rs:154:52\n    |\n154 |                     state.audiobooks = scan_result.audiobooks.clone();\n    |                                                    ^^^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `audiobooks` on type `Vec<Audiobook>`","spans":[{"byte_end":7135,"byte_start":7125,"column_end":62,"column_start":52,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":154,"line_start":154,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":52,"text":"                    state.audiobooks = scan_result.audiobooks.clone();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `data` on type `state::AppState`\n   --> abop-gui\\src\\handlers\\data_updates.rs:158:38\n    |\n158 |                     state.core_state.data.audiobooks.clear();\n    |                                      ^^^^ unknown field\n    |\nhelp: one of the expressions' fields has a field of the same name\n    |\n158 |                     state.core_state.core_state.data.audiobooks.clear();\n    |                                      +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":7347,"byte_start":7347,"column_end":38,"column_start":38,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":null,"line_end":158,"line_start":158,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":38,"highlight_start":38,"text":"                    state.core_state.data.audiobooks.clear();"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `data` on type `state::AppState`","spans":[{"byte_end":7351,"byte_start":7347,"column_end":42,"column_start":38,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":158,"line_start":158,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"                    state.core_state.data.audiobooks.clear();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `audiobooks` on type `Vec<Audiobook>`\n   --> abop-gui\\src\\handlers\\data_updates.rs:159:51\n    |\n159 |                     for audiobook in &scan_result.audiobooks {\n    |                                                   ^^^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `audiobooks` on type `Vec<Audiobook>`","spans":[{"byte_end":7433,"byte_start":7423,"column_end":61,"column_start":51,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":159,"line_start":159,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":51,"text":"                    for audiobook in &scan_result.audiobooks {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `add_audiobook` found for struct `state::AppState` in the current scope\n   --> abop-gui\\src\\handlers\\data_updates.rs:160:42\n    |\n160 |                         state.core_state.add_audiobook(audiobook.clone());\n    |                                          ^^^^^^^^^^^^^ method not found in `state::AppState`\n    |\n   ::: abop-gui\\src\\state.rs:385:1\n    |\n385 | pub struct AppState {\n    | ------------------- method `add_audiobook` not found for this struct\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `add_audiobook` found for struct `state::AppState` in the current scope","spans":[{"byte_end":7491,"byte_start":7478,"column_end":55,"column_start":42,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"method not found in `state::AppState`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":42,"text":"                        state.core_state.add_audiobook(audiobook.clone());"}]},{"byte_end":13440,"byte_start":13421,"column_end":20,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":"method `add_audiobook` not found for this struct","line_end":385,"line_start":385,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"pub struct AppState {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `audiobooks` on type `Vec<Audiobook>`\n   --> abop-gui\\src\\handlers\\data_updates.rs:171:59\n    |\n171 |                         dir_info.book_count = scan_result.audiobooks.len();\n    |                                                           ^^^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `audiobooks` on type `Vec<Audiobook>`","spans":[{"byte_end":8038,"byte_start":8028,"column_end":69,"column_start":59,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":59,"text":"                        dir_info.book_count = scan_result.audiobooks.len();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `scan_duration` on type `Vec<Audiobook>`\n   --> abop-gui\\src\\handlers\\data_updates.rs:172:62\n    |\n172 |                         dir_info.scan_duration = scan_result.scan_duration;\n    |                                                              ^^^^^^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `scan_duration` on type `Vec<Audiobook>`","spans":[{"byte_end":8121,"byte_start":8108,"column_end":75,"column_start":62,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":75,"highlight_start":62,"text":"                        dir_info.scan_duration = scan_result.scan_duration;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `data` on type `state::AppState`\n   --> abop-gui\\src\\handlers\\data_updates.rs:180:36\n    |\n180 |                         core_state.data.audiobooks.len()\n    |                                    ^^^^ unknown field\n    |\nhelp: one of the expressions' fields has a field of the same name\n    |\n180 |                         core_state.core_state.data.audiobooks.len()\n    |                                    +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":8557,"byte_start":8557,"column_end":36,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":null,"line_end":180,"line_start":180,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":36,"highlight_start":36,"text":"                        core_state.data.audiobooks.len()"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `data` on type `state::AppState`","spans":[{"byte_end":8561,"byte_start":8557,"column_end":40,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"unknown field","line_end":180,"line_start":180,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":36,"text":"                        core_state.data.audiobooks.len()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `save_blocking_with_progress` found for struct `state::AppState` in the current scope\n   --> abop-gui\\src\\handlers\\data_updates.rs:195:44\n    |\n195 | ...                   core_state.save_blocking_with_progress(Some(tx))\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `state::AppState`\n    |\n   ::: abop-gui\\src\\state.rs:385:1\n    |\n385 | pub struct AppState {\n    | ------------------- method `save_blocking_with_progress` not found for this struct\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `save_blocking_with_progress` found for struct `state::AppState` in the current scope","spans":[{"byte_end":9296,"byte_start":9269,"column_end":71,"column_start":44,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"method not found in `state::AppState`","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":44,"text":"                                core_state.save_blocking_with_progress(Some(tx))"}]},{"byte_end":13440,"byte_start":13421,"column_end":20,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":false,"label":"method `save_blocking_with_progress` not found for this struct","line_end":385,"line_start":385,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"pub struct AppState {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> abop-gui\\src\\handlers\\data_updates.rs:287:44\n    |\n287 |                 state.scan_progress = Some(progress);\n    |                                       ---- ^^^^^^^^ expected `f32`, found `ScanProgress`\n    |                                       |\n    |                                       arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `abop_core::scanner::ScanProgress` due to the type of the argument passed\n   --> abop-gui\\src\\handlers\\data_updates.rs:287:39\n    |\n287 |                 state.scan_progress = Some(progress);\n    |                                       ^^^^^--------^\n    |                                            |\n    |                                            this argument influences the type of `Some`\nnote: tuple variant defined here\n   --> C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\option.rs:599:5\n    |\n599 |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `abop_core::scanner::ScanProgress` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":13657,"byte_start":13649,"column_end":52,"column_start":44,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":false,"label":"this argument influences the type of `Some`","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":44,"text":"                state.scan_progress = Some(progress);"}]},{"byte_end":13658,"byte_start":13644,"column_end":53,"column_start":39,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":null,"line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":39,"text":"                state.scan_progress = Some(progress);"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":23990,"byte_start":23986,"column_end":9,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\option.rs","is_primary":true,"label":null,"line_end":599,"line_start":599,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":9,"highlight_start":5,"text":"    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13657,"byte_start":13649,"column_end":52,"column_start":44,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":true,"label":"expected `f32`, found `ScanProgress`","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":44,"text":"                state.scan_progress = Some(progress);"}]},{"byte_end":13648,"byte_start":13644,"column_end":43,"column_start":39,"expansion":null,"file_name":"abop-gui\\src\\handlers\\data_updates.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":39,"text":"                state.scan_progress = Some(progress);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\handlers\\ui_state.rs:287:17\n    |\n287 |                 ScanProgress::Started { total_files } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n287 -                 ScanProgress::Started { total_files } => {\n287 +                 <abop_core::scanner::ScanProgress as Example>::Started { total_files } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":13000,"byte_start":12986,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":287,"line_start":287,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::Started { total_files } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":13007,"byte_start":12986,"column_end":38,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":17,"text":"                ScanProgress::Started { total_files } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\handlers\\ui_state.rs:291:17\n    |\n291 |                 ScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n291 -                 ScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {\n291 +                 <abop_core::scanner::ScanProgress as Example>::FileProcessed { current, total, file_name, progress_percentage } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":13240,"byte_start":13226,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":291,"line_start":291,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":13253,"byte_start":13226,"column_end":44,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":291,"line_start":291,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":17,"text":"                ScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\handlers\\ui_state.rs:295:17\n    |\n295 |                 ScanProgress::BatchCommitted { count, total_processed } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n295 -                 ScanProgress::BatchCommitted { count, total_processed } => {\n295 +                 <abop_core::scanner::ScanProgress as Example>::BatchCommitted { count, total_processed } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":13544,"byte_start":13530,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":295,"line_start":295,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::BatchCommitted { count, total_processed } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":13558,"byte_start":13530,"column_end":45,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":295,"line_start":295,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":17,"text":"                ScanProgress::BatchCommitted { count, total_processed } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\handlers\\ui_state.rs:301:17\n    |\n301 |                 ScanProgress::Complete { processed, errors, duration } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n301 -                 ScanProgress::Complete { processed, errors, duration } => {\n301 +                 <abop_core::scanner::ScanProgress as Example>::Complete { processed, errors, duration } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":13843,"byte_start":13829,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":301,"line_start":301,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::Complete { processed, errors, duration } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":13851,"byte_start":13829,"column_end":39,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":301,"line_start":301,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ScanProgress::Complete { processed, errors, duration } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\handlers\\ui_state.rs:309:17\n    |\n309 |                 ScanProgress::Cancelled { processed, duration } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n309 -                 ScanProgress::Cancelled { processed, duration } => {\n309 +                 <abop_core::scanner::ScanProgress as Example>::Cancelled { processed, duration } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":14261,"byte_start":14247,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":309,"line_start":309,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::Cancelled { processed, duration } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":14270,"byte_start":14247,"column_end":40,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\handlers\\ui_state.rs","is_primary":true,"label":null,"line_end":309,"line_start":309,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":17,"text":"                ScanProgress::Cancelled { processed, duration } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `user_preferences` on type `state::AppState`\n   --> abop-gui\\src\\state.rs:160:18\n    |\n160 |                 .user_preferences\n    |                  ^^^^^^^^^^^^^^^^ unknown field\n    |\nhelp: one of the expressions' fields has a field of the same name\n    |\n160 |                 .core_state.user_preferences\n    |                  +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":6085,"byte_start":6085,"column_end":18,"column_start":18,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":160,"line_start":160,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":18,"text":"                .user_preferences"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `user_preferences` on type `state::AppState`","spans":[{"byte_end":6101,"byte_start":6085,"column_end":34,"column_start":18,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":18,"text":"                .user_preferences"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `user_preferences` on type `state::AppState`\n   --> abop-gui\\src\\state.rs:165:18\n    |\n165 |                 .user_preferences\n    |                  ^^^^^^^^^^^^^^^^ unknown field\n    |\nhelp: one of the expressions' fields has a field of the same name\n    |\n165 |                 .core_state.user_preferences\n    |                  +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":6330,"byte_start":6330,"column_end":18,"column_start":18,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":165,"line_start":165,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":18,"text":"                .user_preferences"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `user_preferences` on type `state::AppState`","spans":[{"byte_end":6346,"byte_start":6330,"column_end":34,"column_start":18,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":18,"text":"                .user_preferences"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `data` on type `state::AppState`\n   --> abop-gui\\src\\state.rs:175:36\n    |\n175 |             audiobooks: core_state.data.audiobooks,\n    |                                    ^^^^ unknown field\n    |\nhelp: one of the expressions' fields has a field of the same name\n    |\n175 |             audiobooks: core_state.core_state.data.audiobooks,\n    |                                    +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":6732,"byte_start":6732,"column_end":36,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":null,"line_end":175,"line_start":175,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":36,"highlight_start":36,"text":"            audiobooks: core_state.data.audiobooks,"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `data` on type `state::AppState`","spans":[{"byte_end":6736,"byte_start":6732,"column_end":40,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":36,"text":"            audiobooks: core_state.data.audiobooks,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `state` on type `&abop_core::scanner::library_scanner::ScannerState`\n   --> abop-gui\\src\\state.rs:369:9\n    |\n369 |     pub state: CoreScannerState,\n    |         ^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `state` on type `&abop_core::scanner::library_scanner::ScannerState`","spans":[{"byte_end":13074,"byte_start":13069,"column_end":14,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":369,"line_start":369,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":9,"text":"    pub state: CoreScannerState,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `progress` on type `&abop_core::scanner::library_scanner::ScannerState`\n   --> abop-gui\\src\\state.rs:370:9\n    |\n370 |     pub progress: Option<ScanProgress>,\n    |         ^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `progress` on type `&abop_core::scanner::library_scanner::ScannerState`","spans":[{"byte_end":13111,"byte_start":13103,"column_end":17,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":370,"line_start":370,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"    pub progress: Option<ScanProgress>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `scanner` on type `&abop_core::scanner::library_scanner::ScannerState`\n   --> abop-gui\\src\\state.rs:371:9\n    |\n371 |     pub scanner: Option<Arc<Mutex<LibraryScanner>>>,\n    |         ^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `scanner` on type `&abop_core::scanner::library_scanner::ScannerState`","spans":[{"byte_end":13151,"byte_start":13144,"column_end":16,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":371,"line_start":371,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":9,"text":"    pub scanner: Option<Arc<Mutex<LibraryScanner>>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `state` on type `&abop_core::scanner::library_scanner::ScannerState`\n   --> abop-gui\\src\\state.rs:369:9\n    |\n369 |     pub state: CoreScannerState,\n    |         ^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `state` on type `&abop_core::scanner::library_scanner::ScannerState`","spans":[{"byte_end":13074,"byte_start":13069,"column_end":14,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":369,"line_start":369,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":9,"text":"    pub state: CoreScannerState,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `progress` on type `&abop_core::scanner::library_scanner::ScannerState`\n   --> abop-gui\\src\\state.rs:370:9\n    |\n370 |     pub progress: Option<ScanProgress>,\n    |         ^^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `progress` on type `&abop_core::scanner::library_scanner::ScannerState`","spans":[{"byte_end":13111,"byte_start":13103,"column_end":17,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":370,"line_start":370,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"    pub progress: Option<ScanProgress>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `scanner` on type `&abop_core::scanner::library_scanner::ScannerState`\n   --> abop-gui\\src\\state.rs:371:9\n    |\n371 |     pub scanner: Option<Arc<Mutex<LibraryScanner>>>,\n    |         ^^^^^^^ unknown field\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `scanner` on type `&abop_core::scanner::library_scanner::ScannerState`","spans":[{"byte_end":13151,"byte_start":13144,"column_end":16,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"unknown field","line_end":371,"line_start":371,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":9,"text":"    pub scanner: Option<Arc<Mutex<LibraryScanner>>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0071]: expected struct, variant or union type, found `ScannerState`\n   --> abop-gui\\src\\state.rs:376:9\n    |\n376 |         Self {\n    |         ^^^^ not a struct\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0071","explanation":"A structure-literal syntax was used to create an item that is not a structure\nor enum variant.\n\nExample of erroneous code:\n\n```compile_fail,E0071\ntype U32 = u32;\nlet t = U32 { value: 4 }; // error: expected struct, variant or union type,\n                          // found builtin type `u32`\n```\n\nTo fix this, ensure that the name was correctly spelled, and that the correct\nform of initializer was used.\n\nFor example, the code above can be fixed to:\n\n```\ntype U32 = u32;\nlet t: U32 = 4;\n```\n\nor:\n\n```\nstruct U32 { value: u32 }\nlet t = U32 { value: 4 };\n```\n"},"level":"error","message":"expected struct, variant or union type, found `ScannerState`","spans":[{"byte_end":13268,"byte_start":13264,"column_end":13,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"not a struct","line_end":376,"line_start":376,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":9,"text":"        Self {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `Player` found for enum `abop_core::ViewType` in the current scope\n   --> abop-gui\\src\\state.rs:416:10\n    |\n416 | #[derive(Debug, Clone)]\n    |          ^^^^^ variant or associated item not found in `abop_core::ViewType`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `Player` found for enum `abop_core::ViewType` in the current scope","spans":[{"byte_end":14183,"byte_start":14178,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"variant or associated item not found in `abop_core::ViewType`","line_end":416,"line_start":416,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `Player` found for enum `abop_core::ViewType` in the current scope\n   --> abop-gui\\src\\state.rs:419:5\n    |\n419 |     Player,\n    |     ^^^^^^ variant or associated item not found in `abop_core::ViewType`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `Player` found for enum `abop_core::ViewType` in the current scope","spans":[{"byte_end":14239,"byte_start":14233,"column_end":11,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"variant or associated item not found in `abop_core::ViewType`","line_end":419,"line_start":419,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":5,"text":"    Player,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `Player` found for enum `abop_core::ViewType` in the current scope\n   --> abop-gui\\src\\state.rs:416:17\n    |\n416 | #[derive(Debug, Clone)]\n    |                 ^^^^^ variant or associated item not found in `abop_core::ViewType`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `Player` found for enum `abop_core::ViewType` in the current scope","spans":[{"byte_end":14190,"byte_start":14185,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\state.rs","is_primary":true,"label":"variant or associated item not found in `abop_core::ViewType`","line_end":416,"line_start":416,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> abop-gui\\src\\views\\library.rs:43:30\n    |\n43  |         let status_display = StatusDisplay::enhanced_view(\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n46  |             &state.material_tokens,\n    |             ---------------------- unexpected argument #3\n    |\nnote: associated function defined here\n   --> abop-gui\\src\\components\\status.rs:134:12\n    |\n134 |     pub fn enhanced_view<'a>(\n    |            ^^^^^^^^^^^^^\nhelp: remove the extra argument\n    |\n45  -             state.scanner_progress.state,\n46  -             &state.material_tokens,\n45  +             state.scanner_progress.state,\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":4824,"byte_start":4811,"column_end":25,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":134,"line_start":134,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":12,"text":"    pub fn enhanced_view<'a>("}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":1209,"byte_start":1172,"column_end":35,"column_start":41,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":46,"line_start":45,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":42,"highlight_start":41,"text":"            state.scanner_progress.state,"},{"highlight_end":35,"highlight_start":1,"text":"            &state.material_tokens,"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 2 arguments but 3 arguments were supplied","spans":[{"byte_end":1209,"byte_start":1187,"column_end":35,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":false,"label":"unexpected argument #3","line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            &state.material_tokens,"}]},{"byte_end":1074,"byte_start":1046,"column_end":58,"column_start":30,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":30,"text":"        let status_display = StatusDisplay::enhanced_view("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `Scanner` found for enum `messages::Message` in the current scope\n   --> abop-gui\\src\\views\\library.rs:213:51\n    |\n213 |         self.scanner_progress.view().map(Message::Scanner),\n    |                                                   ^^^^^^^ variant or associated item not found in `messages::Message`\n    |\n   ::: abop-gui\\src\\messages.rs:23:1\n    |\n23  | pub enum Message {\n    | ---------------- variant or associated item `Scanner` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `Scanner` found for enum `messages::Message` in the current scope","spans":[{"byte_end":7481,"byte_start":7474,"column_end":58,"column_start":51,"expansion":null,"file_name":"abop-gui\\src\\views\\library.rs","is_primary":true,"label":"variant or associated item not found in `messages::Message`","line_end":213,"line_start":213,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":51,"text":"        self.scanner_progress.view().map(Message::Scanner),"}]},{"byte_end":725,"byte_start":709,"column_end":17,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\messages.rs","is_primary":false,"label":"variant or associated item `Scanner` not found for this enum","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":1,"text":"pub enum Message {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this function takes 1 argument but 5 arguments were supplied\n  --> abop-gui\\src\\views\\mod.rs:66:32\n   |\n66 |         content = content.push(TaskManager::view(\n   |                                ^^^^^^^^^^^^^^^^^\n67 |             &state.active_task,\n68 |             &state.recent_tasks,\n   |             ------------------- unexpected argument #2 of type `&Vec<TaskInfo>`\n69 |             state.show_task_history,\n   |             ----------------------- unexpected argument #3 of type `bool`\n70 |             state.theme_mode,\n   |             ---------------- unexpected argument #4 of type `theme::ThemeMode`\n71 |             &state.material_tokens,\n   |             ---------------------- unexpected argument #5 of type `&MaterialTokens`\n   |\nnote: expected `&UiState`, found `&Option<TaskInfo>`\n  --> abop-gui\\src\\views\\mod.rs:67:13\n   |\n67 |             &state.active_task,\n   |             ^^^^^^^^^^^^^^^^^^\n   = note: expected reference `&UiState`\n              found reference `&std::option::Option<TaskInfo>`\nnote: associated function defined here\n  --> abop-gui\\src\\components\\task_manager.rs:36:12\n   |\n36 |     pub fn view(state: &UiState) -> Element<Message> {\n   |            ^^^^ ---------------\nhelp: remove the extra arguments\n   |\n67 -             &state.active_task,\n67 +             /* &UiState */,\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected `&UiState`, found `&Option<TaskInfo>`","rendered":null,"spans":[{"byte_end":2086,"byte_start":2068,"column_end":31,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":67,"line_start":67,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":13,"text":"            &state.active_task,"}]}]},{"children":[],"code":null,"level":"note","message":"expected reference `&UiState`\n   found reference `&std::option::Option<TaskInfo>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":1183,"byte_start":1168,"column_end":32,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":false,"label":"","line_end":36,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"    pub fn view(state: &UiState) -> Element<Message> {"}]},{"byte_end":1167,"byte_start":1163,"column_end":16,"column_start":12,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":null,"line_end":36,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"    pub fn view(state: &UiState) -> Element<Message> {"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra arguments","rendered":null,"spans":[{"byte_end":2120,"byte_start":2086,"column_end":32,"column_start":31,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":68,"line_start":67,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":32,"highlight_start":31,"text":"            &state.active_task,"},{"highlight_end":32,"highlight_start":1,"text":"            &state.recent_tasks,"}]},{"byte_end":2158,"byte_start":2120,"column_end":36,"column_start":32,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":69,"line_start":68,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":33,"highlight_start":32,"text":"            &state.recent_tasks,"},{"highlight_end":36,"highlight_start":1,"text":"            state.show_task_history,"}]},{"byte_end":2189,"byte_start":2158,"column_end":29,"column_start":36,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":70,"line_start":69,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":37,"highlight_start":36,"text":"            state.show_task_history,"},{"highlight_end":29,"highlight_start":1,"text":"            state.theme_mode,"}]},{"byte_end":2226,"byte_start":2189,"column_end":35,"column_start":29,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":71,"line_start":70,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":30,"highlight_start":29,"text":"            state.theme_mode,"},{"highlight_end":35,"highlight_start":1,"text":"            &state.material_tokens,"}]},{"byte_end":2086,"byte_start":2068,"column_end":31,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":67,"line_start":67,"suggested_replacement":"/* &UiState */","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":13,"text":"            &state.active_task,"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 1 argument but 5 arguments were supplied","spans":[{"byte_end":2120,"byte_start":2101,"column_end":32,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":false,"label":"unexpected argument #2 of type `&Vec<TaskInfo>`","line_end":68,"line_start":68,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":13,"text":"            &state.recent_tasks,"}]},{"byte_end":2158,"byte_start":2135,"column_end":36,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":false,"label":"unexpected argument #3 of type `bool`","line_end":69,"line_start":69,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":13,"text":"            state.show_task_history,"}]},{"byte_end":2189,"byte_start":2173,"column_end":29,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":false,"label":"unexpected argument #4 of type `theme::ThemeMode`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":13,"text":"            state.theme_mode,"}]},{"byte_end":2226,"byte_start":2204,"column_end":35,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":false,"label":"unexpected argument #5 of type `&MaterialTokens`","line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            &state.material_tokens,"}]},{"byte_end":2053,"byte_start":2036,"column_end":49,"column_start":32,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":32,"text":"        content = content.push(TaskManager::view("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `current_view` on type `state::AppState`\n  --> abop-gui\\src\\views\\mod.rs:76:51\n   |\n76 |     content = content.push(match state.core_state.current_view {\n   |                                                   ^^^^^^^^^^^^ unknown field\n   |\nhelp: one of the expressions' fields has a field of the same name\n   |\n76 |     content = content.push(match state.core_state.core_state.current_view {\n   |                                                   +++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":2326,"byte_start":2326,"column_end":51,"column_start":51,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":"core_state.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":51,"highlight_start":51,"text":"    content = content.push(match state.core_state.current_view {"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `current_view` on type `state::AppState`","spans":[{"byte_end":2338,"byte_start":2326,"column_end":63,"column_start":51,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":"unknown field","line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":51,"text":"    content = content.push(match state.core_state.current_view {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `Player` found for enum `abop_core::ViewType` in the current scope\n  --> abop-gui\\src\\views\\mod.rs:78:19\n   |\n78 |         ViewType::Player => audio_processing_view(state),\n   |                   ^^^^^^ variant or associated item not found in `abop_core::ViewType`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `Player` found for enum `abop_core::ViewType` in the current scope","spans":[{"byte_end":2417,"byte_start":2411,"column_end":25,"column_start":19,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":"variant or associated item not found in `abop_core::ViewType`","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":19,"text":"        ViewType::Player => audio_processing_view(state),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> abop-gui\\src\\views\\mod.rs:84:19\n   |\n55 |       let mut content = column![].spacing(spacing::MD);\n   |                         ------------------------------ expected due to this value\n...\n84 |           content = modal(\n   |  ___________________^\n85 | |             content,\n86 | |             settings_view(state),\n87 | |             Message::CloseSettings,\n88 | |         );\n   | |_________^ expected `Column<'_, Message>`, found `Element<'_, Message, Theme, ...>`\n   |\n   = note: expected struct `iced::widget::Column<'_, messages::Message>`\n              found struct `iced::advanced::iced_graphics::iced_core::Element<'_, messages::Message, Theme, iced_renderer::fallback::Renderer<iced_wgpu::Renderer, iced_tiny_skia::Renderer>>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `iced::widget::Column<'_, messages::Message>`\n   found struct `iced::advanced::iced_graphics::iced_core::Element<'_, messages::Message, Theme, iced_renderer::fallback::Renderer<iced_wgpu::Renderer, iced_tiny_skia::Renderer>>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2710,"byte_start":2599,"column_end":10,"column_start":19,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":true,"label":"expected `Column<'_, Message>`, found `Element<'_, Message, Theme, ...>`","line_end":88,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":19,"text":"        content = modal("},{"highlight_end":21,"highlight_start":1,"text":"            content,"},{"highlight_end":34,"highlight_start":1,"text":"            settings_view(state),"},{"highlight_end":36,"highlight_start":1,"text":"            Message::CloseSettings,"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]},{"byte_end":1677,"byte_start":1647,"column_end":53,"column_start":23,"expansion":null,"file_name":"abop-gui\\src\\views\\mod.rs","is_primary":false,"label":"expected due to this value","line_end":55,"line_start":55,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":23,"text":"    let mut content = column![].spacing(spacing::MD);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: arguments to this function are incorrect\n  --> abop-gui\\src\\library\\scanner.rs:71:5\n   |\n71 |     scan_library(library, db, None)\n   |     ^^^^^^^^^^^^ -------  -- expected `abop_core::models::Library`, found `abop_core::db::Database`\n   |                  |\n   |                  expected `abop_core::db::Database`, found `abop_core::models::Library`\n   |\nnote: expected `Sender<ScanProgress>`, found `Option<_>`\n  --> abop-gui\\src\\library\\scanner.rs:71:31\n   |\n71 |     scan_library(library, db, None)\n   |                               ^^^^\n   = note: expected struct `tokio::sync::mpsc::Sender<abop_core::scanner::ScanProgress>`\n                found enum `std::option::Option<_>`\nnote: function defined here\n  --> abop-gui\\src\\library\\scanner.rs:48:14\n   |\n48 | pub async fn scan_library(\n   |              ^^^^^^^^^^^^\n...\n51 |     progress_tx: mpsc::Sender<ScanProgress>,\n   |     ---------------------------------------\nhelp: swap these arguments\n   |\n71 -     scan_library(library, db, None)\n71 +     scan_library(db, library, /* tokio::sync::mpsc::Sender<abop_core::scanner::ScanProgress> */)\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected `Sender<ScanProgress>`, found `Option<_>`","rendered":null,"spans":[{"byte_end":2220,"byte_start":2216,"column_end":35,"column_start":31,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":31,"text":"    scan_library(library, db, None)"}]}]},{"children":[],"code":null,"level":"note","message":"expected struct `tokio::sync::mpsc::Sender<abop_core::scanner::ScanProgress>`\n     found enum `std::option::Option<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":1631,"byte_start":1592,"column_end":44,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":5,"text":"    progress_tx: mpsc::Sender<ScanProgress>,"}]},{"byte_end":1543,"byte_start":1531,"column_end":26,"column_start":14,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":48,"line_start":48,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":14,"text":"pub async fn scan_library("}]}]},{"children":[],"code":null,"level":"help","message":"swap these arguments","rendered":null,"spans":[{"byte_end":2221,"byte_start":2202,"column_end":36,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":"(db, library, /* tokio::sync::mpsc::Sender<abop_core::scanner::ScanProgress> */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":36,"highlight_start":17,"text":"    scan_library(library, db, None)"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"arguments to this function are incorrect","spans":[{"byte_end":2210,"byte_start":2203,"column_end":25,"column_start":18,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"expected `abop_core::db::Database`, found `abop_core::models::Library`","line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"    scan_library(library, db, None)"}]},{"byte_end":2214,"byte_start":2212,"column_end":29,"column_start":27,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"expected `abop_core::models::Library`, found `abop_core::db::Database`","line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":27,"text":"    scan_library(library, db, None)"}]},{"byte_end":2202,"byte_start":2190,"column_end":17,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"    scan_library(library, db, None)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> abop-gui\\src\\library\\scanner.rs:71:5\n   |\n70 | ) -> Task<Result<ScanResult, AppError>> {\n   |      ---------------------------------- expected `iced::Task<std::result::Result<ScanResult, AppError>>` because of return type\n71 |     scan_library(library, db, None)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Task<Result<ScanResult, AppError>>`, found future\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2221,"byte_start":2190,"column_end":36,"column_start":5,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"expected `Task<Result<ScanResult, AppError>>`, found future","line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":5,"text":"    scan_library(library, db, None)"}]},{"byte_end":2182,"byte_start":2148,"column_end":40,"column_start":6,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"expected `iced::Task<std::result::Result<ScanResult, AppError>>` because of return type","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":6,"text":") -> Task<Result<ScanResult, AppError>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n  --> abop-gui\\src\\library\\scanner.rs:83:27\n   |\n83 |             let scanner = LibraryScanner::new(db, library);\n   |                           ^^^^^^^^^^^^^^^^^^^-------------\n   |                                              |    |\n   |                                              |    expected `usize`, found `Library`\n   |                                              argument #3 of type `usize` is missing\n   |\nnote: expected `Arc<AudiobookRepository>`, found `Database`\n  --> abop-gui\\src\\library\\scanner.rs:83:47\n   |\n83 |             let scanner = LibraryScanner::new(db, library);\n   |                                               ^^\n   = note: expected struct `std::sync::Arc<AudiobookRepository>`\n              found struct `abop_core::db::Database`\nnote: associated function defined here\n  --> C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\scanner\\library_scanner.rs:37:12\n   |\n37 |     pub fn new(repository: Arc<AudiobookRepository>, max_workers: usize, batch_size: usize) -> Self {\n   |            ^^^\nhelp: provide the argument\n   |\n83 -             let scanner = LibraryScanner::new(db, library);\n83 +             let scanner = LibraryScanner::new(/* std::sync::Arc<AudiobookRepository> */, /* usize */, /* usize */);\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected `Arc<AudiobookRepository>`, found `Database`","rendered":null,"spans":[{"byte_end":2608,"byte_start":2606,"column_end":49,"column_start":47,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":47,"text":"            let scanner = LibraryScanner::new(db, library);"}]}]},{"children":[],"code":null,"level":"note","message":"expected struct `std::sync::Arc<AudiobookRepository>`\n   found struct `abop_core::db::Database`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":1008,"byte_start":1005,"column_end":15,"column_start":12,"expansion":null,"file_name":"C:\\Users\\pshap\\coding\\abop\\abop-core\\src\\scanner\\library_scanner.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new(repository: Arc<AudiobookRepository>, max_workers: usize, batch_size: usize) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":2618,"byte_start":2605,"column_end":59,"column_start":46,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":"(/* std::sync::Arc<AudiobookRepository> */, /* usize */, /* usize */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":59,"highlight_start":46,"text":"            let scanner = LibraryScanner::new(db, library);"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 3 arguments but 2 arguments were supplied","spans":[{"byte_end":2617,"byte_start":2610,"column_end":58,"column_start":51,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"expected `usize`, found `Library`","line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":51,"text":"            let scanner = LibraryScanner::new(db, library);"}]},{"byte_end":2618,"byte_start":2605,"column_end":59,"column_start":46,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":"argument #3 of type `usize` is missing","line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":46,"text":"            let scanner = LibraryScanner::new(db, library);"}]},{"byte_end":2605,"byte_start":2586,"column_end":46,"column_start":27,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":27,"text":"            let scanner = LibraryScanner::new(db, library);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `scan_async` found for struct `LibraryScanner` in the current scope\n  --> abop-gui\\src\\library\\scanner.rs:88:25\n   |\n88 |                 scanner.scan_async(progress_tx).await\n   |                         ^^^^^^^^^^ method not found in `LibraryScanner`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `scan_async` found for struct `LibraryScanner` in the current scope","spans":[{"byte_end":2848,"byte_start":2838,"column_end":35,"column_start":25,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"method not found in `LibraryScanner`","line_end":88,"line_start":88,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":25,"text":"                scanner.scan_async(progress_tx).await"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no function or associated item named `new` found for struct `abop_core::scanner::ScanProgress` in the current scope\n  --> abop-gui\\src\\library\\scanner.rs:99:46\n   |\n99 |             let mut progress = ScanProgress::new(0);\n   |                                              ^^^ function or associated item not found in `abop_core::scanner::ScanProgress`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no function or associated item named `new` found for struct `abop_core::scanner::ScanProgress` in the current scope","spans":[{"byte_end":3210,"byte_start":3207,"column_end":49,"column_start":46,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"function or associated item not found in `abop_core::scanner::ScanProgress`","line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":46,"text":"            let mut progress = ScanProgress::new(0);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:104:21\n    |\n104 |                     CoreScanProgress::Started { total_files } => {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n104 -                     CoreScanProgress::Started { total_files } => {\n104 +                     <abop_core::scanner::ScanProgress as Example>::Started { total_files } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":3426,"byte_start":3408,"column_end":39,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":104,"line_start":104,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":21,"text":"                    CoreScanProgress::Started { total_files } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":3433,"byte_start":3408,"column_end":46,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":21,"text":"                    CoreScanProgress::Started { total_files } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:109:21\n    |\n109 |                     CoreScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n109 -                     CoreScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {\n109 +                     <abop_core::scanner::ScanProgress as Example>::FileProcessed { current, total, file_name, progress_percentage } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":3697,"byte_start":3679,"column_end":39,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":109,"line_start":109,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":21,"text":"                    CoreScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":3710,"byte_start":3679,"column_end":52,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":109,"line_start":109,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":21,"text":"                    CoreScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:116:21\n    |\n116 |                     CoreScanProgress::BatchCommitted { count, total_processed } => {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n116 -                     CoreScanProgress::BatchCommitted { count, total_processed } => {\n116 +                     <abop_core::scanner::ScanProgress as Example>::BatchCommitted { count, total_processed } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":4178,"byte_start":4160,"column_end":39,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":116,"line_start":116,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":21,"text":"                    CoreScanProgress::BatchCommitted { count, total_processed } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":4192,"byte_start":4160,"column_end":53,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":116,"line_start":116,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":21,"text":"                    CoreScanProgress::BatchCommitted { count, total_processed } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:119:21\n    |\n119 |                     CoreScanProgress::Complete { processed, errors, duration } => {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n119 -                     CoreScanProgress::Complete { processed, errors, duration } => {\n119 +                     <abop_core::scanner::ScanProgress as Example>::Complete { processed, errors, duration } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":4359,"byte_start":4341,"column_end":39,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":119,"line_start":119,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":21,"text":"                    CoreScanProgress::Complete { processed, errors, duration } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":4367,"byte_start":4341,"column_end":47,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":119,"line_start":119,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":21,"text":"                    CoreScanProgress::Complete { processed, errors, duration } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:125:21\n    |\n125 |                     CoreScanProgress::Cancelled { processed, duration } => {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n125 -                     CoreScanProgress::Cancelled { processed, duration } => {\n125 +                     <abop_core::scanner::ScanProgress as Example>::Cancelled { processed, duration } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":4687,"byte_start":4669,"column_end":39,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":125,"line_start":125,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":21,"text":"                    CoreScanProgress::Cancelled { processed, duration } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":4696,"byte_start":4669,"column_end":48,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":21,"text":"                    CoreScanProgress::Cancelled { processed, duration } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no function or associated item named `new` found for struct `abop_core::scanner::ScanProgress` in the current scope\n   --> abop-gui\\src\\library\\scanner.rs:105:50\n    |\n105 |                         progress = ScanProgress::new(total_files);\n    |                                                  ^^^ function or associated item not found in `abop_core::scanner::ScanProgress`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no function or associated item named `new` found for struct `abop_core::scanner::ScanProgress` in the current scope","spans":[{"byte_end":3508,"byte_start":3505,"column_end":53,"column_start":50,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":"function or associated item not found in `abop_core::scanner::ScanProgress`","line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":50,"text":"                        progress = ScanProgress::new(total_files);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:281:5\n    |\n279 | #[derive(Debug, Clone)]\n    |          ----- in this derive macro expansion\n280 | pub enum ScanProgress {\n281 |     Started { total_files: usize },\n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n281 |     <abop_core::scanner::ScanProgress as Example>::Started { total_files: usize },\n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":9829,"byte_start":9829,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":281,"line_start":281,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    Started { total_files: usize },"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":9829,"byte_start":9829,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":281,"line_start":281,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    Started { total_files: usize },"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:282:5\n    |\n279 | #[derive(Debug, Clone)]\n    |          ----- in this derive macro expansion\n...\n282 |     FileProcessed { \n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n282 |     <abop_core::scanner::ScanProgress as Example>::FileProcessed { \n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":9866,"byte_start":9866,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":282,"line_start":282,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    FileProcessed { "}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":9866,"byte_start":9866,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":282,"line_start":282,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    FileProcessed { "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:288:5\n    |\n279 | #[derive(Debug, Clone)]\n    |          ----- in this derive macro expansion\n...\n288 |     BatchCommitted { \n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n288 |     <abop_core::scanner::ScanProgress as Example>::BatchCommitted { \n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10007,"byte_start":10007,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":288,"line_start":288,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    BatchCommitted { "}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10007,"byte_start":10007,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":288,"line_start":288,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    BatchCommitted { "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:292:5\n    |\n279 | #[derive(Debug, Clone)]\n    |          ----- in this derive macro expansion\n...\n292 |     Complete { \n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n292 |     <abop_core::scanner::ScanProgress as Example>::Complete { \n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10094,"byte_start":10094,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":292,"line_start":292,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    Complete { "}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10094,"byte_start":10094,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":292,"line_start":292,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    Complete { "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:297:5\n    |\n279 | #[derive(Debug, Clone)]\n    |          ----- in this derive macro expansion\n...\n297 |     Cancelled { \n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n297 |     <abop_core::scanner::ScanProgress as Example>::Cancelled { \n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10210,"byte_start":10210,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":297,"line_start":297,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    Cancelled { "}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10210,"byte_start":10210,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":34081,"byte_start":34066,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":907,"line_start":907,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":9789,"byte_start":9784,"column_end":15,"column_start":10,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":297,"line_start":297,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    Cancelled { "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:281:5\n    |\n279 | #[derive(Debug, Clone)]\n    |                 ----- in this derive macro expansion\n280 | pub enum ScanProgress {\n281 |     Started { total_files: usize },\n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n281 |     <abop_core::scanner::ScanProgress as Example>::Started { total_files: usize },\n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":9829,"byte_start":9829,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":281,"line_start":281,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    Started { total_files: usize },"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":9829,"byte_start":9829,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":281,"line_start":281,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    Started { total_files: usize },"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:282:5\n    |\n279 | #[derive(Debug, Clone)]\n    |                 ----- in this derive macro expansion\n...\n282 |     FileProcessed { \n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n282 |     <abop_core::scanner::ScanProgress as Example>::FileProcessed { \n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":9866,"byte_start":9866,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":282,"line_start":282,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    FileProcessed { "}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":9866,"byte_start":9866,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":282,"line_start":282,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    FileProcessed { "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:288:5\n    |\n279 | #[derive(Debug, Clone)]\n    |                 ----- in this derive macro expansion\n...\n288 |     BatchCommitted { \n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n288 |     <abop_core::scanner::ScanProgress as Example>::BatchCommitted { \n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10007,"byte_start":10007,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":288,"line_start":288,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    BatchCommitted { "}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10007,"byte_start":10007,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":288,"line_start":288,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    BatchCommitted { "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:292:5\n    |\n279 | #[derive(Debug, Clone)]\n    |                 ----- in this derive macro expansion\n...\n292 |     Complete { \n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n292 |     <abop_core::scanner::ScanProgress as Example>::Complete { \n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10094,"byte_start":10094,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":292,"line_start":292,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    Complete { "}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10094,"byte_start":10094,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":292,"line_start":292,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    Complete { "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:297:5\n    |\n279 | #[derive(Debug, Clone)]\n    |                 ----- in this derive macro expansion\n...\n297 |     Cancelled { \n    |     ^\n    |\nhelp: if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n297 |     <abop_core::scanner::ScanProgress as Example>::Cancelled { \n    |     +++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10210,"byte_start":10210,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":297,"line_start":297,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    Cancelled { "}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10210,"byte_start":10210,"column_end":5,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":297,"line_start":297,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":5,"highlight_start":5,"text":"    Cancelled { "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:279:17\n    |\n279 | #[derive(Debug, Clone)]\n    |                 ^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":9791,"byte_start":9791,"column_end":17,"column_start":17,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\Users\\pshap\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":9796,"byte_start":9791,"column_end":22,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":false,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":279,"line_start":279,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:305:9\n    |\n305 |         Self::Started { total_files }\n    |         ^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n305 -         Self::Started { total_files }\n305 +         <abop_core::scanner::ScanProgress as Example>::Started { total_files }\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10385,"byte_start":10379,"column_end":15,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":305,"line_start":305,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":15,"highlight_start":9,"text":"        Self::Started { total_files }"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10392,"byte_start":10379,"column_end":22,"column_start":9,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":305,"line_start":305,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":9,"text":"        Self::Started { total_files }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:315:17\n    |\n315 |         *self = Self::FileProcessed {\n    |                 ^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n315 -         *self = Self::FileProcessed {\n315 +         *self = <abop_core::scanner::ScanProgress as Example>::FileProcessed {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10681,"byte_start":10675,"column_end":23,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":315,"line_start":315,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":23,"highlight_start":17,"text":"        *self = Self::FileProcessed {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10694,"byte_start":10675,"column_end":36,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":315,"line_start":315,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":17,"text":"        *self = Self::FileProcessed {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:324:17\n    |\n324 |         *self = Self::Complete {\n    |                 ^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n324 -         *self = Self::Complete {\n324 +         *self = <abop_core::scanner::ScanProgress as Example>::Complete {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":10939,"byte_start":10933,"column_end":23,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":324,"line_start":324,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":23,"highlight_start":17,"text":"        *self = Self::Complete {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":10947,"byte_start":10933,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":324,"line_start":324,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":17,"text":"        *self = Self::Complete {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\library\\scanner.rs:332:17\n    |\n332 |         *self = Self::Cancelled {\n    |                 ^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n332 -         *self = Self::Cancelled {\n332 +         *self = <abop_core::scanner::ScanProgress as Example>::Cancelled {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":11143,"byte_start":11137,"column_end":23,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":332,"line_start":332,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":23,"highlight_start":17,"text":"        *self = Self::Cancelled {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":11152,"byte_start":11137,"column_end":32,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\library\\scanner.rs","is_primary":true,"label":null,"line_end":332,"line_start":332,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"        *self = Self::Cancelled {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\components\\status.rs:140:17\n    |\n140 |                 ScanProgress::Started { total_files } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n140 -                 ScanProgress::Started { total_files } => {\n140 +                 <abop_core::scanner::ScanProgress as Example>::Started { total_files } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Started` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":5057,"byte_start":5043,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":140,"line_start":140,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::Started { total_files } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":5064,"byte_start":5043,"column_end":38,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":17,"text":"                ScanProgress::Started { total_files } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\components\\status.rs:146:17\n    |\n146 |                 ScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n146 -                 ScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {\n146 +                 <abop_core::scanner::ScanProgress as Example>::FileProcessed { current, total, file_name, progress_percentage } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `FileProcessed` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":5340,"byte_start":5326,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":146,"line_start":146,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":5353,"byte_start":5326,"column_end":44,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":146,"line_start":146,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":17,"text":"                ScanProgress::FileProcessed { current, total, file_name, progress_percentage } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\components\\status.rs:153:17\n    |\n153 |                 ScanProgress::BatchCommitted { count, total_processed } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n153 -                 ScanProgress::BatchCommitted { count, total_processed } => {\n153 +                 <abop_core::scanner::ScanProgress as Example>::BatchCommitted { count, total_processed } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `BatchCommitted` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":5786,"byte_start":5772,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":153,"line_start":153,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::BatchCommitted { count, total_processed } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":5800,"byte_start":5772,"column_end":45,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":153,"line_start":153,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":17,"text":"                ScanProgress::BatchCommitted { count, total_processed } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\components\\status.rs:160:17\n    |\n160 |                 ScanProgress::Complete { processed, errors, duration } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n160 -                 ScanProgress::Complete { processed, errors, duration } => {\n160 +                 <abop_core::scanner::ScanProgress as Example>::Complete { processed, errors, duration } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Complete` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":6183,"byte_start":6169,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":160,"line_start":160,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::Complete { processed, errors, duration } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":6191,"byte_start":6169,"column_end":39,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ScanProgress::Complete { processed, errors, duration } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0223]: ambiguous associated type\n   --> abop-gui\\src\\components\\status.rs:168:17\n    |\n168 |                 ScanProgress::Cancelled { processed, duration } => {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path\n    |\n168 -                 ScanProgress::Cancelled { processed, duration } => {\n168 +                 <abop_core::scanner::ScanProgress as Example>::Cancelled { processed, duration } => {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if there were a trait named `Example` with associated type `Cancelled` implemented for `abop_core::scanner::ScanProgress`, you could use the fully-qualified path","rendered":null,"spans":[{"byte_end":6636,"byte_start":6622,"column_end":31,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":168,"line_start":168,"suggested_replacement":"<abop_core::scanner::ScanProgress as Example>::","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":17,"text":"                ScanProgress::Cancelled { processed, duration } => {"}]}]}],"code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","message":"ambiguous associated type","spans":[{"byte_end":6645,"byte_start":6622,"column_end":40,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\status.rs","is_primary":true,"label":null,"line_end":168,"line_start":168,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":17,"text":"                ScanProgress::Cancelled { processed, duration } => {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `style` found for struct `iced::widget::Column` in the current scope\n  --> abop-gui\\src\\components\\task_manager.rs:52:14\n   |\n38 | /             column![\n39 | |                 text(\"Active Task\").size(20),\n40 | |                 text(&task.task_type.to_string()).size(16),\n41 | |                 progress_bar(0.0..=1.0, task.progress)\n...  |\n51 | |             .padding(20)\n52 | |             .style(|theme| containers::container_style(theme, state.theme_mode))\n   | |             -^^^^^ method not found in `iced::widget::Column<'_, messages::Message, _, _>`\n   | |_____________|\n   |\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\nnote: `ComponentStyle` defines an item `style`, perhaps you need to implement it\n  --> abop-gui\\src\\styling\\traits.rs:61:1\n   |\n61 | pub trait ComponentStyle<T> {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is implemented and in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"`ComponentStyle` defines an item `style`, perhaps you need to implement it","rendered":null,"spans":[{"byte_end":1579,"byte_start":1552,"column_end":28,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\styling\\traits.rs","is_primary":true,"label":null,"line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":1,"text":"pub trait ComponentStyle<T> {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `style` found for struct `iced::widget::Column` in the current scope","spans":[{"byte_end":1827,"byte_start":1284,"column_end":14,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":false,"label":"","line_end":52,"line_start":38,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"            column!["},{"highlight_end":46,"highlight_start":1,"text":"                text(\"Active Task\").size(20),"},{"highlight_end":60,"highlight_start":1,"text":"                text(&task.task_type.to_string()).size(16),"},{"highlight_end":55,"highlight_start":1,"text":"                progress_bar(0.0..=1.0, task.progress)"},{"highlight_end":42,"highlight_start":1,"text":"                    .width(Length::Fill),"},{"highlight_end":22,"highlight_start":1,"text":"                row!["},{"highlight_end":37,"highlight_start":1,"text":"                    button(\"Cancel\")"},{"highlight_end":55,"highlight_start":1,"text":"                        .on_press(Message::CancelTask)"},{"highlight_end":74,"highlight_start":1,"text":"                        .style(buttons::button_style(&state.theme_mode)),"},{"highlight_end":18,"highlight_start":1,"text":"                ]"},{"highlight_end":29,"highlight_start":1,"text":"                .spacing(10)"},{"highlight_end":30,"highlight_start":1,"text":"                .padding(10),"},{"highlight_end":14,"highlight_start":1,"text":"            ]"},{"highlight_end":25,"highlight_start":1,"text":"            .padding(20)"},{"highlight_end":14,"highlight_start":1,"text":"            .style(|theme| containers::container_style(theme, state.theme_mode))"}]},{"byte_end":1832,"byte_start":1827,"column_end":19,"column_start":14,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":"method not found in `iced::widget::Column<'_, messages::Message, _, _>`","line_end":52,"line_start":52,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .style(|theme| containers::container_style(theme, state.theme_mode))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<Vec<Row<'_, _, _, _>> as IntoIterator>::Item == Element<'_, _, _, _>`\n   --> abop-gui\\src\\components\\task_manager.rs:63:21\n    |\n62  |                   column(\n    |                   ------ required by a bound introduced by this call\n63  | /                     state.recent_tasks\n64  | |                         .iter()\n65  | |                         .map(|task| {\n66  | |                             row![\n...   |\n72  | |                         })\n73  | |                         .collect::<Vec<_>>(),\n    | |____________________________________________^ expected `Element<'_, _, _, _>`, found `Row<'_, _, _, _>`\n    |\n    = note: expected struct `iced::advanced::iced_graphics::iced_core::Element<'_, _, _, _>`\n               found struct `Row<'_, _, _, _>`\nnote: required by a bound in `column`\n   --> C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_widget-0.13.4\\src\\helpers.rs:272:33\n    |\n271 | pub fn column<'a, Message, Theme, Renderer>(\n    |        ------ required by a bound in this function\n272 |     children: impl IntoIterator<Item = Element<'a, Message, Theme, Renderer>>,\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `column`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `iced::advanced::iced_graphics::iced_core::Element<'_, _, _, _>`\n   found struct `Row<'_, _, _, _>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `column`","rendered":null,"spans":[{"byte_end":7510,"byte_start":7504,"column_end":14,"column_start":8,"expansion":null,"file_name":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_widget-0.13.4\\src\\helpers.rs","is_primary":false,"label":"required by a bound in this function","line_end":271,"line_start":271,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":8,"text":"pub fn column<'a, Message, Theme, Renderer>("}]},{"byte_end":7618,"byte_start":7574,"column_end":77,"column_start":33,"expansion":null,"file_name":"C:\\Users\\pshap\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iced_widget-0.13.4\\src\\helpers.rs","is_primary":true,"label":"required by this bound in `column`","line_end":272,"line_start":272,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":33,"text":"    children: impl IntoIterator<Item = Element<'a, Message, Theme, Renderer>>,"}]}]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<Vec<Row<'_, _, _, _>> as IntoIterator>::Item == Element<'_, _, _, _>`","spans":[{"byte_end":2645,"byte_start":2165,"column_end":45,"column_start":21,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":"expected `Element<'_, _, _, _>`, found `Row<'_, _, _, _>`","line_end":73,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":21,"text":"                    state.recent_tasks"},{"highlight_end":32,"highlight_start":1,"text":"                        .iter()"},{"highlight_end":38,"highlight_start":1,"text":"                        .map(|task| {"},{"highlight_end":34,"highlight_start":1,"text":"                            row!["},{"highlight_end":76,"highlight_start":1,"text":"                                text(&task.task_type.to_string()).size(16),"},{"highlight_end":89,"highlight_start":1,"text":"                                text(format!(\"{:.0}%\", task.progress * 100.0)).size(14),"},{"highlight_end":30,"highlight_start":1,"text":"                            ]"},{"highlight_end":41,"highlight_start":1,"text":"                            .spacing(10)"},{"highlight_end":40,"highlight_start":1,"text":"                            .padding(5)"},{"highlight_end":27,"highlight_start":1,"text":"                        })"},{"highlight_end":45,"highlight_start":1,"text":"                        .collect::<Vec<_>>(),"}]},{"byte_end":2142,"byte_start":2136,"column_end":23,"column_start":17,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":17,"text":"                column("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `style` found for struct `iced::widget::Column` in the current scope\n  --> abop-gui\\src\\components\\task_manager.rs:78:14\n   |\n60 | /             column![\n61 | |                 text(\"Recent Tasks\").size(20),\n62 | |                 column(\n63 | |                     state.recent_tasks\n...  |\n77 | |             .padding(20)\n78 | |             .style(|theme| containers::container_style(theme, state.theme_mode))\n   | |             -^^^^^ method not found in `iced::widget::Column<'_, _, _, _>`\n   | |_____________|\n   |\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\nnote: `ComponentStyle` defines an item `style`, perhaps you need to implement it\n  --> abop-gui\\src\\styling\\traits.rs:61:1\n   |\n61 | pub trait ComponentStyle<T> {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is implemented and in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"`ComponentStyle` defines an item `style`, perhaps you need to implement it","rendered":null,"spans":[{"byte_end":1579,"byte_start":1552,"column_end":28,"column_start":1,"expansion":null,"file_name":"abop-gui\\src\\styling\\traits.rs","is_primary":true,"label":null,"line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":1,"text":"pub trait ComponentStyle<T> {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `style` found for struct `iced::widget::Column` in the current scope","spans":[{"byte_end":2751,"byte_start":2062,"column_end":14,"column_start":13,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":false,"label":"","line_end":78,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"            column!["},{"highlight_end":47,"highlight_start":1,"text":"                text(\"Recent Tasks\").size(20),"},{"highlight_end":24,"highlight_start":1,"text":"                column("},{"highlight_end":39,"highlight_start":1,"text":"                    state.recent_tasks"},{"highlight_end":32,"highlight_start":1,"text":"                        .iter()"},{"highlight_end":38,"highlight_start":1,"text":"                        .map(|task| {"},{"highlight_end":34,"highlight_start":1,"text":"                            row!["},{"highlight_end":76,"highlight_start":1,"text":"                                text(&task.task_type.to_string()).size(16),"},{"highlight_end":89,"highlight_start":1,"text":"                                text(format!(\"{:.0}%\", task.progress * 100.0)).size(14),"},{"highlight_end":30,"highlight_start":1,"text":"                            ]"},{"highlight_end":41,"highlight_start":1,"text":"                            .spacing(10)"},{"highlight_end":40,"highlight_start":1,"text":"                            .padding(5)"},{"highlight_end":27,"highlight_start":1,"text":"                        })"},{"highlight_end":46,"highlight_start":1,"text":"                        .collect::<Vec<_>>(),"},{"highlight_end":18,"highlight_start":1,"text":"                )"},{"highlight_end":29,"highlight_start":1,"text":"                .spacing(5),"},{"highlight_end":14,"highlight_start":1,"text":"            ]"},{"highlight_end":25,"highlight_start":1,"text":"            .padding(20)"},{"highlight_end":14,"highlight_start":1,"text":"            .style(|theme| containers::container_style(theme, state.theme_mode))"}]},{"byte_end":2756,"byte_start":2751,"column_end":19,"column_start":14,"expansion":null,"file_name":"abop-gui\\src\\components\\task_manager.rs","is_primary":true,"label":"method not found in `iced::widget::Column<'_, _, _, _>`","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .style(|theme| containers::container_style(theme, state.theme_mode))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0061, E0071, E0107, E0116, E0117, E0223, E0255, E0271, E0308...\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0061, E0071, E0107, E0116, E0117, E0223, E0255, E0271, E0308...","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/pshap/coding/abop/abop-gui#0.1.0","manifest_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"abop_gui","src_path":"C:\\Users\\pshap\\coding\\abop\\abop-gui\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0061`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0061`.","spans":[]}}
error: could not compile `abop-gui` (lib) due to 142 previous errors; 20 warnings emitted
{"reason":"build-finished","success":false}
